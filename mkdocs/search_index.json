{
    "docs": [
        {
            "location": "/", 
            "text": "Juttle Visualization Library\n\n\nJuttleViz is the chart library used by \nOutrigger\n to render the visual outputs of \nJuttle\n programs.\n\n\nBasic Usage\n\n\nTo use use one of these visualizations in your Juttle, use the \nview\n keyword followed by a particular view name.\n\n\n... | view \nview\n [view-parameters]\n\n\n\n\nIf your program doesn't specify an output, the default is \nview table\n.\n\n\nAvailable Views\n\n\n\n\n\n\n\n\nView\n\n\nDescription\n\n\nImage\n\n\n\n\n\n\n\n\n\n\nbarchart\n\n\nDisplay the output as vertical or horizontal bars for comparing different categories of data.\n\n\n\n\n\n\n\n\nevents\n\n\nOverlay events as markers on top of a time chart.\n\n\n\n\n\n\n\n\nfile\n\n\nNot a visual view. Download the data to a local file.\n\n\nN/A\n\n\n\n\n\n\nless\n\n\nNavigate the data in a manner similar to the UNIX \nless\n command.\n\n\n\n\n\n\n\n\ntext\n\n\nDisplay the output in raw text, CSV or JSON format.\n\n\n\n\n\n\n\n\npiechart\n\n\nRender data as a pie or donut chart.\n\n\n\n\n\n\n\n\nscatterchart\n\n\nPlot data points as individual dots across two axes sourced from the data fields.\n\n\n\n\n\n\n\n\ntable\n\n\nDisplay the output as text in rows and columns. This is the default output if no other is specified.\n\n\n\n\n\n\n\n\ntile\n\n\nRender a metric tile displaying exactly one value.\n\n\n\n\n\n\n\n\ntimechart\n\n\nCreate a time series chart. Time charts support multiple series and can be combined with \nview events\n\n\n\n\n\n\n\n\n\n\nControlling Layout\n\n\nA program can have multiple view sinks. You can customize the positioning of a particular view by passing \n-row\n and \n-col\n parameters to each sink.\n\n\nFor example, if you wanted to layout 4 tables in a 2x2 grid, the juttle would be\n\n\nemit -limit 1\n| (\n  view table -title 'upper left' -row 1 -col 1;\n  view table -title 'upper right' -row 1 -col 2;\n  view table -title 'lower left' -row 2 -col 2;\n  view table -title 'lower right' -row 2 -col 2;\n)\n\n\n\n\nDefining View Parameters\n\n\nParameters for a view can be specified individually,\nor as object literals using the \n-options\n parameter (\n-o\n for short).\n\n\nIndividually specified parameters are shown in the syntax reference for each view.\nA simple example with individual parameters looks like this:\n\n\n... | view barchart\n        -title \nCPU usage\n\n        -value value\n\n\n\n\nThe example above can also be expressed with object literals like this:\n\n\n... | view barchart -options { title: \nCPU usage\n, value: value }\n\n\n\n\nThe two formats can also be combined, like this:\n\n\n... | view barchart\n        -title \nCPU usage\n\n        -o { value: value }\n\n\n\n\nIf you've worked with JavaScript, the \n-options\n method will look familiar. It\nprovides additional flexibility by allowing you to store parameters as\nvars or consts, like this:\n\n\nconst timechartOptions = {\ntitle: 'Average CPU Usage'\n};\n... | view timechart -options timechartOptions\n\n\n\n\nThey can also be defined in a module and referenced in another program:\n\n\n// module \nstandards\n\nexport const cpu_chart_params = {\n  series: [ { field: 'cpu', color: 'blue', label: 'cpu usage', unit: 'percent' } ],\n  ...\n};\n\n// main program:\nimport \nstandards\n as standards;\n... | view timechart\n        -options standards.cpu_chart_params\n        -title \ncpu usage\n\n\n\n\n\n \nNote:\n If a parameter is specified more\nthan once, the last instance overrides any previous instances. For\nexample, both of these imaginary programs produce a time chart whose\ntitle is \"the real title\":\n\n\n... | view timechart\n        -title \nignored\n\n        -o { title: \nthe real title\n }\n... | view timechart\n        -o { title: \nnot the title\n }\n        -title \nthe real title", 
            "title": "About"
        }, 
        {
            "location": "/#juttle-visualization-library", 
            "text": "JuttleViz is the chart library used by  Outrigger  to render the visual outputs of  Juttle  programs.", 
            "title": "Juttle Visualization Library"
        }, 
        {
            "location": "/#basic-usage", 
            "text": "To use use one of these visualizations in your Juttle, use the  view  keyword followed by a particular view name.  ... | view  view  [view-parameters]  If your program doesn't specify an output, the default is  view table .", 
            "title": "Basic Usage"
        }, 
        {
            "location": "/#available-views", 
            "text": "View  Description  Image      barchart  Display the output as vertical or horizontal bars for comparing different categories of data.     events  Overlay events as markers on top of a time chart.     file  Not a visual view. Download the data to a local file.  N/A    less  Navigate the data in a manner similar to the UNIX  less  command.     text  Display the output in raw text, CSV or JSON format.     piechart  Render data as a pie or donut chart.     scatterchart  Plot data points as individual dots across two axes sourced from the data fields.     table  Display the output as text in rows and columns. This is the default output if no other is specified.     tile  Render a metric tile displaying exactly one value.     timechart  Create a time series chart. Time charts support multiple series and can be combined with  view events", 
            "title": "Available Views"
        }, 
        {
            "location": "/#controlling-layout", 
            "text": "A program can have multiple view sinks. You can customize the positioning of a particular view by passing  -row  and  -col  parameters to each sink.  For example, if you wanted to layout 4 tables in a 2x2 grid, the juttle would be  emit -limit 1\n| (\n  view table -title 'upper left' -row 1 -col 1;\n  view table -title 'upper right' -row 1 -col 2;\n  view table -title 'lower left' -row 2 -col 2;\n  view table -title 'lower right' -row 2 -col 2;\n)", 
            "title": "Controlling Layout"
        }, 
        {
            "location": "/#defining-view-parameters", 
            "text": "Parameters for a view can be specified individually,\nor as object literals using the  -options  parameter ( -o  for short).  Individually specified parameters are shown in the syntax reference for each view.\nA simple example with individual parameters looks like this:  ... | view barchart\n        -title  CPU usage \n        -value value  The example above can also be expressed with object literals like this:  ... | view barchart -options { title:  CPU usage , value: value }  The two formats can also be combined, like this:  ... | view barchart\n        -title  CPU usage \n        -o { value: value }  If you've worked with JavaScript, the  -options  method will look familiar. It\nprovides additional flexibility by allowing you to store parameters as\nvars or consts, like this:  const timechartOptions = {\ntitle: 'Average CPU Usage'\n};\n... | view timechart -options timechartOptions  They can also be defined in a module and referenced in another program:  // module  standards \nexport const cpu_chart_params = {\n  series: [ { field: 'cpu', color: 'blue', label: 'cpu usage', unit: 'percent' } ],\n  ...\n};\n\n// main program:\nimport  standards  as standards;\n... | view timechart\n        -options standards.cpu_chart_params\n        -title  cpu usage     Note:  If a parameter is specified more\nthan once, the last instance overrides any previous instances. For\nexample, both of these imaginary programs produce a time chart whose\ntitle is \"the real title\":  ... | view timechart\n        -title  ignored \n        -o { title:  the real title  }\n... | view timechart\n        -o { title:  not the title  }\n        -title  the real title", 
            "title": "Defining View Parameters"
        }, 
        {
            "location": "/charts/barchart/", 
            "text": "barchart\n\n\nDisplay the output as vertical or horizontal bars for comparing different categories of data.\n\n\n\n\n | Note: When working with batched data, only values from the last batch are displayed. See \n-resetCategories\n below for more details on how categories are treated across batches.\n\n\nview barchart -o {\n   categoryField: 'fieldname',\n   id: 'string',\n   title: 'string',\n   color: 'color',\n   negativeColor: 'color',\n   colorful: true|false,\n   orientation: 'vertical'|'horizontal',\n   resetCategories: n,\n   xScale: {\n     label: 'auto'|'fieldname'\n   },\n   yScales: {\n     primary: {\n       label: 'fieldname',\n       tickFormat: 'd3FormatString',\n       minValue: 'fieldname',\n       maxValue: 'fieldname'\n       displayOnAxis: 'axisname'\n     }\n   },\n   valueField: 'fieldname',\n   tooltip: {\n     nameField: 'fieldname',\n     valueField: 'fieldname',\n     valueFormat: 'd3FormatString'\n   }\n}\n\n\n\n\nor\n\n\nview barchart -id 'string' -title: 'string'\n  -color 'color' -negativeColor 'color'\n   -orientation 'vertical'|'horizontal' -resetCategories n\n   -colorful true|false -xScale.label 'fieldname'\n   -yScales.primary.label 'auto'|'fieldname' -yScales.primary.tickFormat 'd3FormatString' -yScales.primary.minValue 'fieldname' -yScales.primary.maxValue 'fieldname' -yScales.primary.displayOnAxis 'axisname'\n   -categoryField 'fieldname' -valueField 'fieldname'\n   -tooltip.nameField 'fieldname' -tooltip.valueField 'fieldname' -tooltip.valueFormat 'd3FormatString'\n\n\n\n\nSee \nDefining sink parameters\n for an explanation of how sink parameters can be expressed as object literals.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nRequired?\n\n\n\n\n\n\n\n\n\n\n-id\n\n\nAn identifier for this sink that serves as a handle for referencing the object in Juttle syntax; conceptually identical to a variable name\n\n\nNo\n\n\n\n\n\n\n-title\n\n\nThe title for the user-visible output, if it has one; the value may be any valid Juttle expression that produces a string\n\n\nNo; defaults to the name field that is present in all metrics points\n\n\n\n\n\n\n-categoryField\n\n\nThe name of the field to use as the category accessor. Categories are displayed in the order in which they appear in the data stream, from left to right or, in the case of horizontal bars, from top to bottom.\n\n\nNo; if there is only one field in the incoming data besides time, source_type,value, and name, then that field becomes the category accessor\n\n\n\n\n\n\n-valueField\n\n\nThe name of the field to use as the source for the numeric values\n\n\nNo; defaults to the \nvalue\n field that is present in all metrics points. If no value field is present, the first numeric field in the stream is used.\n\n\n\n\n\n\n-color\n\n\nThe color to use for positive bars, specified with any \nCSS3-supported hex or name value\n\n\nNo; if not specified, a color is selected from the built-in palette\n\n\n\n\n\n\n-negativeColor\n\n\nThe color to use for negative bars, specified with any \nCSS3-supported hex or name value\n\n\nNo; if not specified, a color is selected from the built-in palette\n\n\n\n\n\n\n-colorful\n\n\nWhen this is true, each bar in the chart is displayed in a different color.\n\n\nNo\n\n\n\n\n\n\n-orientation\n\n\nThe orientation of the bars, either vertical or horizontal\n\n\nNo; default is vertical\n\n\n\n\n\n\n-resetCategories\n\n\nAn integer indicating the number of batches before the bar chart resets its internal list of sorted categories. This is useful only with live streaming data, particularly if the set of categories in your data changes from batch to batch and you want to periodically remove stale categories. \nThe default behavior is to display all categories seen in all batches. When a category disappears from the data stream, its bar is replaced by a gap indicating a null value. When a new category appears, a new bar appears to the right of all existing bars. \nSet this to zero to reset on every batch, so that the bar chart always displays the categories for the current batch only. Set this to a value greater than zero to refresh the category list on every n\nth\n batch.\n\n\nNo; defaults to never\n\n\n\n\n\n\n-xScale.label\n\n\nThe label to display under the X axis\n\n\nNo; default is the name of the \n-categoryField\n\n\n\n\n\n\n-yScales.primary.label\n\n\nA string to label the Y axis\n\n\nNo; default is the name of the \n-valueField\n\n\n\n\n\n\n-yScales.primary.tickFormat\n\n\nCustomize the unit display for the Y axis, using the \nd3 number formatting syntax\n\n\nNo\n\n\n\n\n\n\n-yScales.primary.minValue\n\n\nThe value at the bottom of the Y scale\n\n\nNo; the default is automatically derived from your data\n\n\n\n\n\n\n-yScales.primary.maxValue\n\n\nThe value at the top of the Y scale\n\n\nNo; the default is automatically derived from your data\n\n\n\n\n\n\n-yScales.primary.displayOnAxis\n\n\nWhere to display the Y axis; must be exactly one of the following depending on whether your bar chart is oriented vertically or horizontally:\nleft\nright\n\n\nNo; the default is left\n\n\n\n\n\n\n-tooltip.nameField\n\n\nThe field containing the category to display in tooltips\n\n\nNo; defaults to the \n-categoryField\n\n\n\n\n\n\n-tooltip.valueField\n\n\nThe field containing the value to display in tooltips\n\n\nNo; defaults to the -valueField\n\n\n\n\n\n\n-tooltip.valueFormat\n\n\nThe format for the -tooltip.valueField, using the \nd3 number formatting syntax\n\n\nNo; defaults to the \n-yScales.primary.tickFormat\n\n\n\n\n\n\n\n\nA bar chart example with options\n\n\nread stochastic -source 'cdn' -nhosts 10 -from :10 minutes before 2014-01-01: -to :2014-01-01: -source_type 'metrics' name = 'cpu'\n| filter name = 'cpu'\n| reduce value = avg(value) by host\n| sort value -desc\n| view barchart -o {\n    categoryField: 'host',\n    valueField: 'value',\n    title: 'Average CPU % per host for last 10 minutes',\n    yScales: {\n      primary: {\n        tickFormat: '%'\n      }\n    },\n    tooltip: {\n      valueFormat: '%'\n    }\n  }", 
            "title": "barchart"
        }, 
        {
            "location": "/charts/barchart/#barchart", 
            "text": "Display the output as vertical or horizontal bars for comparing different categories of data.    | Note: When working with batched data, only values from the last batch are displayed. See  -resetCategories  below for more details on how categories are treated across batches.  view barchart -o {\n   categoryField: 'fieldname',\n   id: 'string',\n   title: 'string',\n   color: 'color',\n   negativeColor: 'color',\n   colorful: true|false,\n   orientation: 'vertical'|'horizontal',\n   resetCategories: n,\n   xScale: {\n     label: 'auto'|'fieldname'\n   },\n   yScales: {\n     primary: {\n       label: 'fieldname',\n       tickFormat: 'd3FormatString',\n       minValue: 'fieldname',\n       maxValue: 'fieldname'\n       displayOnAxis: 'axisname'\n     }\n   },\n   valueField: 'fieldname',\n   tooltip: {\n     nameField: 'fieldname',\n     valueField: 'fieldname',\n     valueFormat: 'd3FormatString'\n   }\n}  or  view barchart -id 'string' -title: 'string'\n  -color 'color' -negativeColor 'color'\n   -orientation 'vertical'|'horizontal' -resetCategories n\n   -colorful true|false -xScale.label 'fieldname'\n   -yScales.primary.label 'auto'|'fieldname' -yScales.primary.tickFormat 'd3FormatString' -yScales.primary.minValue 'fieldname' -yScales.primary.maxValue 'fieldname' -yScales.primary.displayOnAxis 'axisname'\n   -categoryField 'fieldname' -valueField 'fieldname'\n   -tooltip.nameField 'fieldname' -tooltip.valueField 'fieldname' -tooltip.valueFormat 'd3FormatString'  See  Defining sink parameters  for an explanation of how sink parameters can be expressed as object literals.     Parameter  Description  Required?      -id  An identifier for this sink that serves as a handle for referencing the object in Juttle syntax; conceptually identical to a variable name  No    -title  The title for the user-visible output, if it has one; the value may be any valid Juttle expression that produces a string  No; defaults to the name field that is present in all metrics points    -categoryField  The name of the field to use as the category accessor. Categories are displayed in the order in which they appear in the data stream, from left to right or, in the case of horizontal bars, from top to bottom.  No; if there is only one field in the incoming data besides time, source_type,value, and name, then that field becomes the category accessor    -valueField  The name of the field to use as the source for the numeric values  No; defaults to the  value  field that is present in all metrics points. If no value field is present, the first numeric field in the stream is used.    -color  The color to use for positive bars, specified with any  CSS3-supported hex or name value  No; if not specified, a color is selected from the built-in palette    -negativeColor  The color to use for negative bars, specified with any  CSS3-supported hex or name value  No; if not specified, a color is selected from the built-in palette    -colorful  When this is true, each bar in the chart is displayed in a different color.  No    -orientation  The orientation of the bars, either vertical or horizontal  No; default is vertical    -resetCategories  An integer indicating the number of batches before the bar chart resets its internal list of sorted categories. This is useful only with live streaming data, particularly if the set of categories in your data changes from batch to batch and you want to periodically remove stale categories.  The default behavior is to display all categories seen in all batches. When a category disappears from the data stream, its bar is replaced by a gap indicating a null value. When a new category appears, a new bar appears to the right of all existing bars.  Set this to zero to reset on every batch, so that the bar chart always displays the categories for the current batch only. Set this to a value greater than zero to refresh the category list on every n th  batch.  No; defaults to never    -xScale.label  The label to display under the X axis  No; default is the name of the  -categoryField    -yScales.primary.label  A string to label the Y axis  No; default is the name of the  -valueField    -yScales.primary.tickFormat  Customize the unit display for the Y axis, using the  d3 number formatting syntax  No    -yScales.primary.minValue  The value at the bottom of the Y scale  No; the default is automatically derived from your data    -yScales.primary.maxValue  The value at the top of the Y scale  No; the default is automatically derived from your data    -yScales.primary.displayOnAxis  Where to display the Y axis; must be exactly one of the following depending on whether your bar chart is oriented vertically or horizontally: left right  No; the default is left    -tooltip.nameField  The field containing the category to display in tooltips  No; defaults to the  -categoryField    -tooltip.valueField  The field containing the value to display in tooltips  No; defaults to the -valueField    -tooltip.valueFormat  The format for the -tooltip.valueField, using the  d3 number formatting syntax  No; defaults to the  -yScales.primary.tickFormat     A bar chart example with options  read stochastic -source 'cdn' -nhosts 10 -from :10 minutes before 2014-01-01: -to :2014-01-01: -source_type 'metrics' name = 'cpu'\n| filter name = 'cpu'\n| reduce value = avg(value) by host\n| sort value -desc\n| view barchart -o {\n    categoryField: 'host',\n    valueField: 'value',\n    title: 'Average CPU % per host for last 10 minutes',\n    yScales: {\n      primary: {\n        tickFormat: '%'\n      }\n    },\n    tooltip: {\n      valueFormat: '%'\n    }\n  }", 
            "title": "barchart"
        }, 
        {
            "location": "/charts/events/", 
            "text": "events\n\n\nOverlay events as markers on top of a time chart.\n\n\n\n\nview events -o {\n  id: 'string',\n  title: 'string',\n  typeField: 'fieldname',\n  nameField: 'fieldname',\n  messageField: 'fieldname',\n  timeField: 'fieldname',\n  on: 'sinkID',\n  useMarkdown: 'true|false'\n}\n\n\n\n\nor\n\n\nview events -id 'string' -title 'string'\n  -typeField 'fieldname'\n  -nameField 'fieldname' -messageField 'fieldname' -timeField 'fieldname'\n  -on 'sinkID' -useMarkdown: 'true|false'\n\n\n\n\nSee \nDefining sink parameters\n\nfor an explanation of how sink parameters can be expressed as object literals.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nRequired?\n\n\n\n\n\n\n\n\n\n\n-id\n\n\nAn identifier for this sink that serves as a handle for referencing the object in Juttle syntax; conceptually identical to a variable name\n\n\nNo\n\n\n\n\n\n\n-title\n\n\nThe title for the user-visible output, if it has one; the value may be any valid Juttle expression that produces a string\n\n\nNo; defaults to the name field that is present in all metrics points\n\n\n\n\n\n\n-typeField\n\n\nThe name of a field in your data points that contains the class string of the icon to display. If your points don't already contain such a field, you must add one like this: \n... | put type='fa-smile-o' ...\n \nComing soon: support for\nFont Awesome\n class strings (such as \"fa-git\" for git events).\n\n\nNo; the default fieldname is \"type\", and if no \"type\" field is set then the default icon is an empty circle\n\n\n\n\n\n\n-nameField\n\n\nThe field from which to source the title of the tooltip\n\n\nNo\n\n\n\n\n\n\n-messageField\n\n\nThe field to source the text content of the tooltip\n\n\nNo\n\n\n\n\n\n\n-timeField\n\n\nThe field containing the time stamp\n\n\nNo; defaults to the time field\n\n\n\n\n\n\n-on\n\n\nThe ID of the time chart upon which to overlay events. See \nOverlaying events on time charts\n for information about overlaying charts.\n\n\nNo; when this option is omitted, events are displayed as a table\n\n\n\n\n\n\n-useMarkdown\n\n\nWhen this option is 'true', the values of the -nameField and the -messageField are parsed as markdown, allowing you to include links in your tooltips\n\n\nNo; the default is 'false'\n\n\n\n\n\n\n\n\nExample: Overlay two series of \"git merge\" events on a time chart showing CPU load\n\n\nconst spiketime1 = :7 minutes before 2014-01-01:;\nconst spiketime2 = :3 minutes before 2014-01-01:;\n\nreducer spike_cpu(valfield,hostname,time) {\n\n    // workaround for PROD-5118, once its fixed we can remove this const redefinition\n    const spiketime1 = :7 minutes before 2014-01-01:;\n    const spiketime2 = :3 minutes before 2014-01-01:;\n\n    var spike1 = 0;\n    var spike2 = 0;\n    var val = 0;\n\n    function update() {\n        if (*time \n spiketime1) {\n        spike1 = 1;\n        }\n        if (*time \n spiketime2) {\n        spike2 = 1;\n        }\n        if ((*hostname == \nnyc.2\n) \n spike1 != 0) {\n        val = *valfield + 0.5;\n        } else {\n        if ((*hostname == \nsea.0\n) \n spike2 != 0) {\n            val = *valfield + 0.2;\n        } else {\n            val = *valfield;\n        }\n        }\n    }\n\n    function result() {\n        return val;\n    }\n\n}\n\nread stochastic -source 'cdn' -nhosts 3 -from :10 minutes before 2014-01-01: -to :2014-01-01: -source_type 'metrics' name = 'cpu'\n|filter name = 'cpu'\n|put value=spike_cpu(value,host,time)\n|  view timechart\n     -valueField 'value'\n     -keyField 'host'\n     -yScales.primary.tickFormat '%'\n     -title \n% CPU busy on all hosts\n\n     -id 'CPU';\n\nemit -limit 1 -from spiketime1\n| put title = \ntitle\n,type = \ngit\n,text = \nEnable new CPU-consuming service in New York\n,label = \ngit merge\n\n| view events\n    -on \nCPU\n\n    -typeField \ntype\n\n    -timeField \ntime\n\n    -messageField \ntext\n\n    -nameField \nlabel\n;\n\nemit -limit 1 -from spiketime2\n| put title = \ntitle\n,type = \ngit\n,text = \nSomething that thrashes the CPU in Seattle\n,label = \ngit merge\n\n| view events\n    -on \nCPU\n -typeField \ntype\n\n    -timeField \ntime\n\n    -messageField \ntext\n\n    -nameField \nlabel\n;", 
            "title": "events"
        }, 
        {
            "location": "/charts/events/#events", 
            "text": "Overlay events as markers on top of a time chart.   view events -o {\n  id: 'string',\n  title: 'string',\n  typeField: 'fieldname',\n  nameField: 'fieldname',\n  messageField: 'fieldname',\n  timeField: 'fieldname',\n  on: 'sinkID',\n  useMarkdown: 'true|false'\n}  or  view events -id 'string' -title 'string'\n  -typeField 'fieldname'\n  -nameField 'fieldname' -messageField 'fieldname' -timeField 'fieldname'\n  -on 'sinkID' -useMarkdown: 'true|false'  See  Defining sink parameters \nfor an explanation of how sink parameters can be expressed as object literals.     Parameter  Description  Required?      -id  An identifier for this sink that serves as a handle for referencing the object in Juttle syntax; conceptually identical to a variable name  No    -title  The title for the user-visible output, if it has one; the value may be any valid Juttle expression that produces a string  No; defaults to the name field that is present in all metrics points    -typeField  The name of a field in your data points that contains the class string of the icon to display. If your points don't already contain such a field, you must add one like this:  ... | put type='fa-smile-o' ...   Coming soon: support for Font Awesome  class strings (such as \"fa-git\" for git events).  No; the default fieldname is \"type\", and if no \"type\" field is set then the default icon is an empty circle    -nameField  The field from which to source the title of the tooltip  No    -messageField  The field to source the text content of the tooltip  No    -timeField  The field containing the time stamp  No; defaults to the time field    -on  The ID of the time chart upon which to overlay events. See  Overlaying events on time charts  for information about overlaying charts.  No; when this option is omitted, events are displayed as a table    -useMarkdown  When this option is 'true', the values of the -nameField and the -messageField are parsed as markdown, allowing you to include links in your tooltips  No; the default is 'false'     Example: Overlay two series of \"git merge\" events on a time chart showing CPU load  const spiketime1 = :7 minutes before 2014-01-01:;\nconst spiketime2 = :3 minutes before 2014-01-01:;\n\nreducer spike_cpu(valfield,hostname,time) {\n\n    // workaround for PROD-5118, once its fixed we can remove this const redefinition\n    const spiketime1 = :7 minutes before 2014-01-01:;\n    const spiketime2 = :3 minutes before 2014-01-01:;\n\n    var spike1 = 0;\n    var spike2 = 0;\n    var val = 0;\n\n    function update() {\n        if (*time   spiketime1) {\n        spike1 = 1;\n        }\n        if (*time   spiketime2) {\n        spike2 = 1;\n        }\n        if ((*hostname ==  nyc.2 )   spike1 != 0) {\n        val = *valfield + 0.5;\n        } else {\n        if ((*hostname ==  sea.0 )   spike2 != 0) {\n            val = *valfield + 0.2;\n        } else {\n            val = *valfield;\n        }\n        }\n    }\n\n    function result() {\n        return val;\n    }\n\n}\n\nread stochastic -source 'cdn' -nhosts 3 -from :10 minutes before 2014-01-01: -to :2014-01-01: -source_type 'metrics' name = 'cpu'\n|filter name = 'cpu'\n|put value=spike_cpu(value,host,time)\n|  view timechart\n     -valueField 'value'\n     -keyField 'host'\n     -yScales.primary.tickFormat '%'\n     -title  % CPU busy on all hosts \n     -id 'CPU';\n\nemit -limit 1 -from spiketime1\n| put title =  title ,type =  git ,text =  Enable new CPU-consuming service in New York ,label =  git merge \n| view events\n    -on  CPU \n    -typeField  type \n    -timeField  time \n    -messageField  text \n    -nameField  label ;\n\nemit -limit 1 -from spiketime2\n| put title =  title ,type =  git ,text =  Something that thrashes the CPU in Seattle ,label =  git merge \n| view events\n    -on  CPU  -typeField  type \n    -timeField  time \n    -messageField  text \n    -nameField  label ;", 
            "title": "events"
        }, 
        {
            "location": "/charts/file/", 
            "text": "file\n\n\nSave the program's output to a JSON file in your browser's downloads\ndirectory.\n\n\nview file -filename filename\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nRequired?\n\n\n\n\n\n\n\n\n\n\n-filename\n\n\nThe file name to use for the output. No path information is supported; the file is saved in the downloads directory configured for your browser.\n\n\nNo; the default is 'output.json'\n\n\n\n\n\n\n\n\nExample: Emit one point and output it to a local JSON file\n\n\nemit -limit 1 \n| put v = \nA\n \n| view file -filename 'someOutput.json'", 
            "title": "file"
        }, 
        {
            "location": "/charts/file/#file", 
            "text": "Save the program's output to a JSON file in your browser's downloads\ndirectory.  view file -filename filename     Parameter  Description  Required?      -filename  The file name to use for the output. No path information is supported; the file is saved in the downloads directory configured for your browser.  No; the default is 'output.json'     Example: Emit one point and output it to a local JSON file  emit -limit 1 \n| put v =  A  \n| view file -filename 'someOutput.json'", 
            "title": "file"
        }, 
        {
            "location": "/charts/less/", 
            "text": "less\n\n\nView the time and message field values of points. You can search and navigate as you would with the UNIX less\ncommand.\n\n\n\n\nview less -title string\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nRequired?\n\n\n\n\n\n\n\n\n\n\n-title\n\n\nThe title for the user-visible output, if it has one; the value may be any valid Juttle expression that produces a string\n\n\nNo; defaults to the name field that is present in all metrics points\n\n\n\n\n\n\n\n\nIt supports these keyboard shortcuts:\n\n\n\n\n\n\n\n\nKey\n\n\nAction\n\n\n\n\n\n\n\n\n\n\ng\n\n\nGo to the beginning of the output\n\n\n\n\n\n\nG\n\n\nGo to the end of the output\n\n\n\n\n\n\nspace\n\n\nPage down\n\n\n\n\n\n\nb\n\n\nPage up\n\n\n\n\n\n\n/\n\n\nSearch forward\n\n\n\n\n\n\n?\n\n\nSearch backward\n\n\n\n\n\n\nn\n\n\nNext match\n\n\n\n\n\n\np\n\n\nPrevious match\n\n\n\n\n\n\nj (or down arrow)\n\n\nMove down\n\n\n\n\n\n\nk (or up arrow)\n\n\nMove up\n\n\n\n\n\n\n\n\nExample\n\n\nread stochastic -last :1 minute: -source 'logs'\n| view less", 
            "title": "less"
        }, 
        {
            "location": "/charts/less/#less", 
            "text": "View the time and message field values of points. You can search and navigate as you would with the UNIX less\ncommand.   view less -title string     Parameter  Description  Required?      -title  The title for the user-visible output, if it has one; the value may be any valid Juttle expression that produces a string  No; defaults to the name field that is present in all metrics points     It supports these keyboard shortcuts:     Key  Action      g  Go to the beginning of the output    G  Go to the end of the output    space  Page down    b  Page up    /  Search forward    ?  Search backward    n  Next match    p  Previous match    j (or down arrow)  Move down    k (or up arrow)  Move up     Example  read stochastic -last :1 minute: -source 'logs'\n| view less", 
            "title": "less"
        }, 
        {
            "location": "/charts/text/", 
            "text": "text\n\n\nDisplay a raw dump of the output, in a fixed-width, console-style font, or as JSON or CSV.\n\n\n\n\nview text -o {\n   id: 'string',\n   title: 'string',\n   height: n,\n   limit: n,\n   format: 'raw|json|csv'\n}\n\n\n\n\nor\n\n\nview text -id 'string' -title 'string'\n  -height n\n  -limit n\n  -format 'raw'\n\n\n\n\nSee \nDefining sink parameters\n for an explanation of how sink parameters can be expressed as object literals.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nRequired?\n\n\n\n\n\n\n\n\n\n\n-id\n\n\nAn identifier for this sink that serves as a handle for referencing the object in Juttle syntax; conceptually identical to a variable name\n\n\nNo\n\n\n\n\n\n\n-title\n\n\nThe title for the user-visible output, if it has one; the value may be any valid Juttle expression that produces a string\n\n\nNo; defaults to the name field that is present in all metrics points\n\n\n\n\n\n\n-height\n   The height of the log display in number of lines\n\n\nNo; default is 20 lines\n\n\n\n\n\n\n\n\n-limit\n\n\nThe total number of log lines to display\n\n\nNo; default is all log lines produced by the flowgraph\n\n\n\n\n\n\n-format\n\n\nYou can set this to 'csv' or 'json' to get CSV or pretty-printed JSON output, respectively. Batch delimiters are ignored when 'json' or 'csv' is specified.\n\n\nNo; default is 'raw', which produces one data point per line, plus batch delimiters\n\n\n\n\n\n\n\n\nExample: raw display style\n\n\nemit -limit 5\n| put value = Math.round(Math.random() * 1000)\n| view text\n    -format 'raw'\n\n\n\n\n\n\nExample: CSV format\n\n\nemit -limit 5\n| put value = Math.round(Math.random() * 1000)\n| view text\n    -format 'csv'\n\n\n\n\n\n\nExample: JSON format\n\n\nemit -limit 5\n| put value = Math.round(Math.random() * 1000)\n| view text\n    -format 'json'", 
            "title": "text"
        }, 
        {
            "location": "/charts/text/#text", 
            "text": "Display a raw dump of the output, in a fixed-width, console-style font, or as JSON or CSV.   view text -o {\n   id: 'string',\n   title: 'string',\n   height: n,\n   limit: n,\n   format: 'raw|json|csv'\n}  or  view text -id 'string' -title 'string'\n  -height n\n  -limit n\n  -format 'raw'  See  Defining sink parameters  for an explanation of how sink parameters can be expressed as object literals.     Parameter  Description  Required?      -id  An identifier for this sink that serves as a handle for referencing the object in Juttle syntax; conceptually identical to a variable name  No    -title  The title for the user-visible output, if it has one; the value may be any valid Juttle expression that produces a string  No; defaults to the name field that is present in all metrics points    -height    The height of the log display in number of lines  No; default is 20 lines     -limit  The total number of log lines to display  No; default is all log lines produced by the flowgraph    -format  You can set this to 'csv' or 'json' to get CSV or pretty-printed JSON output, respectively. Batch delimiters are ignored when 'json' or 'csv' is specified.  No; default is 'raw', which produces one data point per line, plus batch delimiters     Example: raw display style  emit -limit 5\n| put value = Math.round(Math.random() * 1000)\n| view text\n    -format 'raw'   Example: CSV format  emit -limit 5\n| put value = Math.round(Math.random() * 1000)\n| view text\n    -format 'csv'   Example: JSON format  emit -limit 5\n| put value = Math.round(Math.random() * 1000)\n| view text\n    -format 'json'", 
            "title": "text"
        }, 
        {
            "location": "/charts/piechart/", 
            "text": "piechart\n\n\nRender data as a pie or donut chart.\n\n\n\n\nview piechart -o {\n   categoryField: 'fieldname',\n   id: 'string',\n   title: 'string',\n   valueField: 'fieldname',\n   radiusInner: n,\n   sliceLabels: {\n     nameField: fieldname',\n     valueField: 'fieldname',\n     valueFormat: 'd3FormatString'\n   }\n}\n\n\n\n\nor\n\n\nview piechart -categoryField 'fieldname' -id 'string' -title 'string' -valueField 'fieldname' -messageField 'fieldname' -sliceLabels.nameField 'auto'|'fieldname' -sliceLabels.valueField 'auto'|'fieldname' -sliceLabels.valueFormat 'auto'|'d3FormatString' -radiusInner n\n\n\n\n\nSee \nDefining sink parameters\n for an explanation of how sink parameters can be expressed as object literals.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nRequired?\n\n\n\n\n\n\n\n\n\n\n-categoryField\n\n\nThe name of the field to use as the category accessor. Categories are displayed in the order in which they appear in the data stream, clockwise.\n\n\nYes\n\n\n\n\n\n\n-id\n\n\nAn identifier for this sink that serves as a handle for referencing the object in Juttle syntax; conceptually identical to a variable name\n\n\nNo\n\n\n\n\n\n\n-title\n\n\nThe title for the user-visible output, if it has one; the value may be any valid Juttle expression that produces a string\n\n\nNo; defaults to the name field that is present in all metrics points\n\n\n\n\n\n\n-valueField\n\n\nThe name of the field to use as the source for the numeric values\n\n\nNo; defaults to the \nvalue\n field that is present in all metrics points. If no value field is present, the first numeric field in the stream is used.\n\n\n\n\n\n\n-radiusInner\n\n\nOptionally, you can use this parameter to display the pie chart as a wheel with an inner radius specified in pixels\n\n\nNo; default is 0\n\n\n\n\n\n\n-sliceLabels.nameField\n\n\nThe field containing an alternative name label for each slice\n\n\nNo; default is the value of \n-categoryField\n\n\n\n\n\n\n-sliceLabels.valueField\n\n\nThe field containing an alternative value label for each slice\n\n\nNo; default is the value of \n-valueField\n\n\n\n\n\n\n-sliceLabels.valueFormat\n\n\nThe format for the value label, using the \nd3 number formatting syntax\n\n\nNo; default is \n.2f\n\n\n\n\n\n\n\n\nExample: Render a simple donut chart showing disk utilization\n \n\n\nread stochastic -source 'cdn' -last :1h: -source_type 'metric' name='disk'\n| reduce disk_full = last(value)\n| put disk_empty = 1 - disk_full\n| split\n| view piechart -title 'Disk Usage' -sliceLabels.valueFormat '%'", 
            "title": "piechart"
        }, 
        {
            "location": "/charts/piechart/#piechart", 
            "text": "Render data as a pie or donut chart.   view piechart -o {\n   categoryField: 'fieldname',\n   id: 'string',\n   title: 'string',\n   valueField: 'fieldname',\n   radiusInner: n,\n   sliceLabels: {\n     nameField: fieldname',\n     valueField: 'fieldname',\n     valueFormat: 'd3FormatString'\n   }\n}  or  view piechart -categoryField 'fieldname' -id 'string' -title 'string' -valueField 'fieldname' -messageField 'fieldname' -sliceLabels.nameField 'auto'|'fieldname' -sliceLabels.valueField 'auto'|'fieldname' -sliceLabels.valueFormat 'auto'|'d3FormatString' -radiusInner n  See  Defining sink parameters  for an explanation of how sink parameters can be expressed as object literals.     Parameter  Description  Required?      -categoryField  The name of the field to use as the category accessor. Categories are displayed in the order in which they appear in the data stream, clockwise.  Yes    -id  An identifier for this sink that serves as a handle for referencing the object in Juttle syntax; conceptually identical to a variable name  No    -title  The title for the user-visible output, if it has one; the value may be any valid Juttle expression that produces a string  No; defaults to the name field that is present in all metrics points    -valueField  The name of the field to use as the source for the numeric values  No; defaults to the  value  field that is present in all metrics points. If no value field is present, the first numeric field in the stream is used.    -radiusInner  Optionally, you can use this parameter to display the pie chart as a wheel with an inner radius specified in pixels  No; default is 0    -sliceLabels.nameField  The field containing an alternative name label for each slice  No; default is the value of  -categoryField    -sliceLabels.valueField  The field containing an alternative value label for each slice  No; default is the value of  -valueField    -sliceLabels.valueFormat  The format for the value label, using the  d3 number formatting syntax  No; default is  .2f     Example: Render a simple donut chart showing disk utilization    read stochastic -source 'cdn' -last :1h: -source_type 'metric' name='disk'\n| reduce disk_full = last(value)\n| put disk_empty = 1 - disk_full\n| split\n| view piechart -title 'Disk Usage' -sliceLabels.valueFormat '%'", 
            "title": "piechart"
        }, 
        {
            "location": "/charts/scatterchart/", 
            "text": "scatterchart\n\n\nPlot data points as individual dots across two axes sourced from the data fields; can be faceted.\n\n\n\n\nview scatterchart -o {\n   title: string,\n   markerSize: n,\n   markerOpacity: n,\n   duration: duration,\n   limit: n,\n   valueField: fieldname,\n   controlField: fieldname,\n   keyField: fieldname,\n   timeField: fieldname,\n   xScales: {\n     primary: {\n       label: string,\n       tickFormat: d3FormatString,\n       minValue: value,\n       maxValue: value\n     }\n   },\n   yScales: {\n     primary: {\n       label: string,\n       tickFormat: d3FormatString,\n       minValue: value,\n       maxValue: value,\n       displayOnAxis: 'left|right'\n     }\n   },\n   tooltip: {\n     titleField: fieldname,\n     controlLabel: string,\n     controlFormat: d3FormatString,\n     valueLabel: string,\n     valueFormat: d3FormatString\n   },\n   series: [\n   {\n     name: 'string',\n     label: 'string',\n     color: 'color'\n   },\n   {\n     name: 'anotherseries',\n     ...\n   }\n   ],\n   facet: {\n     fields: [field1, ...fieldN],\n     width: n,\n     height: n\n   }\n\n\n\n\nor\n\n\nview scatterchart -title string\n-markerSize n -markerOpacity n -duration duration -limit n\n-valueField fieldname -controlField fieldname -keyField fieldname -timeField fieldname\n-xScales.primary.label string -xScales.primary.tickFormat d3FormatString -xScales.primary.minValue value -xScales.primary.maxValue value\n-yScales.primary.label string -yScales.primary.tickFormat d3FormatString -yScales.primary.minValue value -yScales.primary.maxValue value -yScales.primary.displayOnAxis 'left|right'\n-tooltip.titleField fieldname -tooltip.controlLabel string -tooltip.controlFormat d3FormatString -tooltip.valueLabel string -tooltip.valueFormat d3FormatString\n-series [{name: 'string', label: 'string', color: 'color'},{name: 'anotherseries', ...}]\n  -facet.fields field1, ...fieldN -facet.width n -face.height n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nRequired?\n\n\n\n\n\n\n\n\n\n\n-title\n\n\nThe title for the user-visible output, if it has one; the value may be any valid Juttle expression that produces a string\n\n\nNo; defaults to the name field that is present in all metrics points\n\n\n\n\n\n\n-markerSize\n\n\nThe pixel size of the circle for each point\n\n\nNo; defaults to 6\n\n\n\n\n\n\n-markerOpacity\n\n\nThe opacity level of the datapoint marker, a number between 0.1 (10%) and 1 (100%)\n\n\nNo; defaults to 1\n\n\n\n\n\n\n-duration\n\n\nThe span of time to display, either in seconds (\n=10) or as a Juttle moment literal\n\n\nNo; defaults to 5 minutes when querying live data\n\n\n\n\n\n\n-limit\n\n\nThe maximum number of total data points to display\n\n\nNo; defaults to the first 1000 to avoid consuming unbounded memory\n\n\n\n\n\n\n-valueField\n\n\nThe name of the field to use as the source for the numeric values\n\n\nNo; defaults to the \nvalue\n field that is present in all metrics points. If no value field is present, the first numeric field in the stream is used.\n\n\n\n\n\n\n-controlField\n\n\nThe name of the field to use as the source for the X-axis values\n\n\nNo; defaults to a field called control, if present, otherwise the second numerical field in the stream\n\n\n\n\n\n\n-keyField\n\n\nThe field containing the name of the series to which each point belongs\n\n\nRequired when series is configured; otherwise Jut looks for unique streams and creates a series for each one. For simple metrics, the key field defaults to the \nname\n field that is present in all metrics points\n\n\n\n\n\n\n-timeField\n\n\nThe field containing the time stamp\n\n\nNo; defaults to the time field\n\n\n\n\n\n\n-xScales.primary.label\n\n\nA string to label the X axis\n\n\nNo; defaults to the name of the \n-controlField\n\n\n\n\n\n\n-xScales.primary.tickFormat\n\n\nCustomize the unit display for this axis, using the \nd3 number formatting syntax\n\n\nNo\n\n\n\n\n\n\n-xScales.primary.minValue\n\n\nThe value at the left end of the X scale\n\n\nNo; the default is automatically derived from your data\n\n\n\n\n\n\n-xScales.primary.maxValue\n\n\nThe value at the right end of the X scale\n\n\nNo; the default is automatically derived from your data\n\n\n\n\n\n\n-yScales.primary.label\n\n\nA string to label the Y axis\n\n\nNo; default is the name of the \n-valueField\n\n\n\n\n\n\n-yScales.primary.tickFormat\n\n\nCustomize the unit display for the Y axis, using the \nd3 number formatting syntax\n\n\nNo\n\n\n\n\n\n\n-yScales.primary.minValue\n\n\nThe value at the bottom of the Y scale\n\n\nNo; the default is automatically derived from your data\n\n\n\n\n\n\n-yScales.primary.maxValue\n\n\nThe value at the top of the Y scale\n\n\nNo; the default is automatically derived from your data\n\n\n\n\n\n\n-yScales.primary.displayOnAxis\n\n\nWhere to display the Y axis; must be exactly one of the following depending on whether your bar chart is oriented vertically or horizontally:\nleft\nright\n\n\nNo; the default is left\n\n\n\n\n\n\n-tooltip.titleField\n\n\nThe name of the field containing a string to use as the title for the tooltip\n\n\nNo; defaults to the \n-keyField\n\n\n\n\n\n\n-tooltip.controlLabel\n\n\nA string for the label to display in the tooltip for the -controlField value\n\n\nNo; defaults to the \n-xScales.primary.label\n\n\n\n\n\n\n-tooltip.controlFormat\n\n\nThe format for the \n-tooltip.titleField\n, using the \nd3 number formatting syntax\n\n\nNo; defaults to the -xScales.primary.tickFormat\n\n\n\n\n\n\n-tooltip.valueLabel\n\n\nA string for the label to display in the tooltip for the -valueField value\n\n\nNo; defaults to the \n-yScales.primary.label\n\n\n\n\n\n\n-tooltip.valueFormat\n\n\nThe format for the -tooltip.valueField, using the \nd3 number formatting syntax\n\n\nNo; defaults to the \n-yScales.primary.tickFormat\n\n\n\n\n\n\n-series\n\n\nConfigure one or more data series individually, using one or more arrays with additional parameters, \nsee below\n\n\nNo\n\n\n\n\n\n\n-facet.fields\n\n\nA comma-separated list of the fields on which facets are based\n\n\nRequired to enable faceting; omit this option to disable facets\n\n\n\n\n\n\n-facet.width\n\n\nThe width configuration for facets, which may be a fluid or fixed width: \nFluid width: A percentage or fraction defining the grid layout of facets, one of the following: '100%', '50%', '25%', '20%', '1/2', '1/3', '1/4', '1/5', '1/6'. For example, '1/2' means facets are displayed in two columns, as does '50%'.\nFixed width: A number larger than 150 defining the fixed pixel width of individual facets\n\n\nNo; defaults to '1/3'\n\n\n\n\n\n\n-facet.height\n\n\nA number larger than 80 defining the fixed pixel height of individual facets\n\n\nNo; the default height is calculated based on the width\n\n\n\n\n\n\n\n\nSeries Parameters\n\n\n   -series [   \n   {   \n     name : 'seriesname',   \n     label : 'string',   \n     color : 'color'   \n   },   \n   {   \n     name : 'someotherseries',   \n     ...   \n   }   \n   ]   \n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA series name that can be found in the specified \n-keyField\n; this parameter is required for any configured series.\n\n\n\n\n\n\nlabel\n\n\nAn optional string to override the scale label for this series\n\n\n\n\n\n\ncolor\n\n\nThe color to use for this series, specified with any \nCSS3-supported hex or name value\n; if not specified, a color is selected from the built-in palette\n\n\n\n\n\n\n\n\nExample: Display a scatterchart showing CPU usage versus response time\n\n\n(\n    read stochastic -source 'srch_cluster' -from :2 minutes ago: name = 'response_ms';\n    read stochastic -source 'srch_cluster' -from :2 minutes ago: name = 'cpu'\n)\n| put *name = value\n| join\n| keep time, cpu, response_ms, service\n| view scatterchart -o {\n    valueField: 'response_ms',\n    controlField: 'cpu',\n    keyField: 'service',\n    xScales: {\n        primary: {\n            label: 'CPU Utilization (%)',\n            tickFormat: '%'\n        }\n    },\n    yScales: {\n        primary: {\n            label: 'Response Time (ms)'\n        }\n    },\n    duration: :5m:\n}\n\n\n\n\n\n\nExample: Display a faceted scatterchart\n\n\n(\nemit -limit 10 | put  response_ms = count(), cpu = count(), service = 'search', host = 'host1';\nemit -limit 10 | put  response_ms = count()*2, cpu = count()*2, service = 'index', host = 'host2';\nemit -limit 10 | put  response_ms = count()*3, cpu = count()*3, service = 'auth', host = 'host1';\nemit -limit 10 | put  response_ms = count()*4, cpu = count()*4, service = 'test', host = 'host2';\nemit -limit 10 | put  response_ms = count()*5, cpu = count()*5, service = 'tim', host = 'host1';\n)\n| view scatterchart -o {\n  title: 'Faceted Scatter Chart',\n  valueField: 'cpu',\n  controlField: 'response_ms',\n  facet: {\n    fields: ['service'],\n    width: '1/3',\n    height: 150\n  },\n  duration: :10s:\n}", 
            "title": "scatterchart"
        }, 
        {
            "location": "/charts/scatterchart/#scatterchart", 
            "text": "Plot data points as individual dots across two axes sourced from the data fields; can be faceted.   view scatterchart -o {\n   title: string,\n   markerSize: n,\n   markerOpacity: n,\n   duration: duration,\n   limit: n,\n   valueField: fieldname,\n   controlField: fieldname,\n   keyField: fieldname,\n   timeField: fieldname,\n   xScales: {\n     primary: {\n       label: string,\n       tickFormat: d3FormatString,\n       minValue: value,\n       maxValue: value\n     }\n   },\n   yScales: {\n     primary: {\n       label: string,\n       tickFormat: d3FormatString,\n       minValue: value,\n       maxValue: value,\n       displayOnAxis: 'left|right'\n     }\n   },\n   tooltip: {\n     titleField: fieldname,\n     controlLabel: string,\n     controlFormat: d3FormatString,\n     valueLabel: string,\n     valueFormat: d3FormatString\n   },\n   series: [\n   {\n     name: 'string',\n     label: 'string',\n     color: 'color'\n   },\n   {\n     name: 'anotherseries',\n     ...\n   }\n   ],\n   facet: {\n     fields: [field1, ...fieldN],\n     width: n,\n     height: n\n   }  or  view scatterchart -title string\n-markerSize n -markerOpacity n -duration duration -limit n\n-valueField fieldname -controlField fieldname -keyField fieldname -timeField fieldname\n-xScales.primary.label string -xScales.primary.tickFormat d3FormatString -xScales.primary.minValue value -xScales.primary.maxValue value\n-yScales.primary.label string -yScales.primary.tickFormat d3FormatString -yScales.primary.minValue value -yScales.primary.maxValue value -yScales.primary.displayOnAxis 'left|right'\n-tooltip.titleField fieldname -tooltip.controlLabel string -tooltip.controlFormat d3FormatString -tooltip.valueLabel string -tooltip.valueFormat d3FormatString\n-series [{name: 'string', label: 'string', color: 'color'},{name: 'anotherseries', ...}]\n  -facet.fields field1, ...fieldN -facet.width n -face.height n     Parameter  Description  Required?      -title  The title for the user-visible output, if it has one; the value may be any valid Juttle expression that produces a string  No; defaults to the name field that is present in all metrics points    -markerSize  The pixel size of the circle for each point  No; defaults to 6    -markerOpacity  The opacity level of the datapoint marker, a number between 0.1 (10%) and 1 (100%)  No; defaults to 1    -duration  The span of time to display, either in seconds ( =10) or as a Juttle moment literal  No; defaults to 5 minutes when querying live data    -limit  The maximum number of total data points to display  No; defaults to the first 1000 to avoid consuming unbounded memory    -valueField  The name of the field to use as the source for the numeric values  No; defaults to the  value  field that is present in all metrics points. If no value field is present, the first numeric field in the stream is used.    -controlField  The name of the field to use as the source for the X-axis values  No; defaults to a field called control, if present, otherwise the second numerical field in the stream    -keyField  The field containing the name of the series to which each point belongs  Required when series is configured; otherwise Jut looks for unique streams and creates a series for each one. For simple metrics, the key field defaults to the  name  field that is present in all metrics points    -timeField  The field containing the time stamp  No; defaults to the time field    -xScales.primary.label  A string to label the X axis  No; defaults to the name of the  -controlField    -xScales.primary.tickFormat  Customize the unit display for this axis, using the  d3 number formatting syntax  No    -xScales.primary.minValue  The value at the left end of the X scale  No; the default is automatically derived from your data    -xScales.primary.maxValue  The value at the right end of the X scale  No; the default is automatically derived from your data    -yScales.primary.label  A string to label the Y axis  No; default is the name of the  -valueField    -yScales.primary.tickFormat  Customize the unit display for the Y axis, using the  d3 number formatting syntax  No    -yScales.primary.minValue  The value at the bottom of the Y scale  No; the default is automatically derived from your data    -yScales.primary.maxValue  The value at the top of the Y scale  No; the default is automatically derived from your data    -yScales.primary.displayOnAxis  Where to display the Y axis; must be exactly one of the following depending on whether your bar chart is oriented vertically or horizontally: left right  No; the default is left    -tooltip.titleField  The name of the field containing a string to use as the title for the tooltip  No; defaults to the  -keyField    -tooltip.controlLabel  A string for the label to display in the tooltip for the -controlField value  No; defaults to the  -xScales.primary.label    -tooltip.controlFormat  The format for the  -tooltip.titleField , using the  d3 number formatting syntax  No; defaults to the -xScales.primary.tickFormat    -tooltip.valueLabel  A string for the label to display in the tooltip for the -valueField value  No; defaults to the  -yScales.primary.label    -tooltip.valueFormat  The format for the -tooltip.valueField, using the  d3 number formatting syntax  No; defaults to the  -yScales.primary.tickFormat    -series  Configure one or more data series individually, using one or more arrays with additional parameters,  see below  No    -facet.fields  A comma-separated list of the fields on which facets are based  Required to enable faceting; omit this option to disable facets    -facet.width  The width configuration for facets, which may be a fluid or fixed width:  Fluid width: A percentage or fraction defining the grid layout of facets, one of the following: '100%', '50%', '25%', '20%', '1/2', '1/3', '1/4', '1/5', '1/6'. For example, '1/2' means facets are displayed in two columns, as does '50%'. Fixed width: A number larger than 150 defining the fixed pixel width of individual facets  No; defaults to '1/3'    -facet.height  A number larger than 80 defining the fixed pixel height of individual facets  No; the default height is calculated based on the width     Series Parameters     -series [   \n   {   \n     name : 'seriesname',   \n     label : 'string',   \n     color : 'color'   \n   },   \n   {   \n     name : 'someotherseries',   \n     ...   \n   }   \n   ]        Parameter  Description      name  A series name that can be found in the specified  -keyField ; this parameter is required for any configured series.    label  An optional string to override the scale label for this series    color  The color to use for this series, specified with any  CSS3-supported hex or name value ; if not specified, a color is selected from the built-in palette     Example: Display a scatterchart showing CPU usage versus response time  (\n    read stochastic -source 'srch_cluster' -from :2 minutes ago: name = 'response_ms';\n    read stochastic -source 'srch_cluster' -from :2 minutes ago: name = 'cpu'\n)\n| put *name = value\n| join\n| keep time, cpu, response_ms, service\n| view scatterchart -o {\n    valueField: 'response_ms',\n    controlField: 'cpu',\n    keyField: 'service',\n    xScales: {\n        primary: {\n            label: 'CPU Utilization (%)',\n            tickFormat: '%'\n        }\n    },\n    yScales: {\n        primary: {\n            label: 'Response Time (ms)'\n        }\n    },\n    duration: :5m:\n}   Example: Display a faceted scatterchart  (\nemit -limit 10 | put  response_ms = count(), cpu = count(), service = 'search', host = 'host1';\nemit -limit 10 | put  response_ms = count()*2, cpu = count()*2, service = 'index', host = 'host2';\nemit -limit 10 | put  response_ms = count()*3, cpu = count()*3, service = 'auth', host = 'host1';\nemit -limit 10 | put  response_ms = count()*4, cpu = count()*4, service = 'test', host = 'host2';\nemit -limit 10 | put  response_ms = count()*5, cpu = count()*5, service = 'tim', host = 'host1';\n)\n| view scatterchart -o {\n  title: 'Faceted Scatter Chart',\n  valueField: 'cpu',\n  controlField: 'response_ms',\n  facet: {\n    fields: ['service'],\n    width: '1/3',\n    height: 150\n  },\n  duration: :10s:\n}", 
            "title": "scatterchart"
        }, 
        {
            "location": "/charts/table/", 
            "text": "table\n\n\nDisplay the output as text in rows and columns.\n\n\nThis is the default output if no other is specified.\n\n\n\n\n\nview table -o {\n   id: 'string',\n   title: 'string',\n   height: n,\n   limit: n,\n   update: 'replace|append',\n   columnOrder: 'col1',...'colN',\n   markdownFields: ['field1',...'fieldN']\n}\n\n\n\n\n\nor\n\n\nview table -id 'string' -title 'string' -height n -limit n -update 'replace|append' -columnOrder 'col1',...'colN' -markdownFields ['field1',...'fieldN']\n\n\n\n\nSee \nDefining sink parameters\n\nfor an explanation of how sink parameters can be expressed as object literals.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nRequired?\n\n\n\n\n\n\n\n\n\n\n-id\n\n\nAn identifier for this sink that serves as a handle for referencing the object in Juttle syntax; conceptually identical to a variable name\n\n\nNo\n\n\n\n\n\n\n-title\n\n\nThe title for the user-visible output, if it has one; the value may be any valid Juttle expression that produces a string\n\n\nNo; defaults to the name field that is present in all metrics points\n\n\n\n\n\n\n-height\n   The height in pixels of the table display before a scroll bar appears\n\n\nNo; default is 400 pixels\n\n\n\n\n\n\n\n\n-limit\n\n\nThe maximum number of total data points to display\n\n\nNo; defaults to the first 1000 to avoid consuming unbounded memory\n\n\n\n\n\n\n-update\n\n\nHow to display new batches of data, one of the following:\nreplace:\nReplace the current rows with new rows. \nappend:\nAdd new rows to the end of the table.\n\n\nNo; default is 'append'\n\n\n\n\n\n\n-columnOrder\n\n\nAn array of field names specifying the order of the table columns from left to right. If the data stream includes unspecified fields, these are displayed to the right of the specified ones, in alphabetical order.\n\n\nNo; default is 'time','name','value' followed by the remaining columns in alphabetical order\n\n\n\n\n\n\n-markdownFields\n\n\nAn array of fields to interpret as markdown, for example to turn certain fields into hyperlinks, as in \nthe example below\n \n:baby_symbol: \nexperimental:\n We're still working on this feature. Try it and see what you think, then \nchat with us\n to provide feedback.\n\n\nNo\n\n\n\n\n\n\n\n\nExample: Table with ordered columns\n\n\nemit -every :0.2s: -limit 5 \n| put a = count(), b = Math.random() + Math.floor(Math.random() * 10) \n| view table \n    -columnOrder 'a','b','time'\n\n\n\n\n\n\nExample: Table with markdown\n \n\n\nread stochastic -from :1 hour ago: -to :now: -source 'logs' -errp 0.10 message~'*error*'\n| reduce count() by message\n| put url='[google it](https://www.google.com/?gws_rd=ssl#\nq=' \n    + String.replace(message, /\\(|\\)/g, ' ') + ')' // not to confuse markdown with ()\n| sort count -desc\n| view table -markdownFields ['url'] -title 'Google These Errors'", 
            "title": "table"
        }, 
        {
            "location": "/charts/table/#table", 
            "text": "Display the output as text in rows and columns.  This is the default output if no other is specified.   \nview table -o {\n   id: 'string',\n   title: 'string',\n   height: n,\n   limit: n,\n   update: 'replace|append',\n   columnOrder: 'col1',...'colN',\n   markdownFields: ['field1',...'fieldN']\n}  or  view table -id 'string' -title 'string' -height n -limit n -update 'replace|append' -columnOrder 'col1',...'colN' -markdownFields ['field1',...'fieldN']  See  Defining sink parameters \nfor an explanation of how sink parameters can be expressed as object literals.     Parameter  Description  Required?      -id  An identifier for this sink that serves as a handle for referencing the object in Juttle syntax; conceptually identical to a variable name  No    -title  The title for the user-visible output, if it has one; the value may be any valid Juttle expression that produces a string  No; defaults to the name field that is present in all metrics points    -height    The height in pixels of the table display before a scroll bar appears  No; default is 400 pixels     -limit  The maximum number of total data points to display  No; defaults to the first 1000 to avoid consuming unbounded memory    -update  How to display new batches of data, one of the following: replace: Replace the current rows with new rows.  append: Add new rows to the end of the table.  No; default is 'append'    -columnOrder  An array of field names specifying the order of the table columns from left to right. If the data stream includes unspecified fields, these are displayed to the right of the specified ones, in alphabetical order.  No; default is 'time','name','value' followed by the remaining columns in alphabetical order    -markdownFields  An array of fields to interpret as markdown, for example to turn certain fields into hyperlinks, as in  the example below   :baby_symbol:  experimental:  We're still working on this feature. Try it and see what you think, then  chat with us  to provide feedback.  No     Example: Table with ordered columns  emit -every :0.2s: -limit 5 \n| put a = count(), b = Math.random() + Math.floor(Math.random() * 10) \n| view table \n    -columnOrder 'a','b','time'   Example: Table with markdown    read stochastic -from :1 hour ago: -to :now: -source 'logs' -errp 0.10 message~'*error*'\n| reduce count() by message\n| put url='[google it](https://www.google.com/?gws_rd=ssl# q=' \n    + String.replace(message, /\\(|\\)/g, ' ') + ')' // not to confuse markdown with ()\n| sort count -desc\n| view table -markdownFields ['url'] -title 'Google These Errors'", 
            "title": "table"
        }, 
        {
            "location": "/charts/tile/", 
            "text": "tile\n\n\nRender a metric tile displaying exactly one value; can be faceted.\n\n\n\n\nview tile -o {\n  id: 'string'\n  title: 'string'\n  levelField: 'fieldname',\n  valueField: 'fieldname',\n  valueFormat: 'd3FormatString',\n  timeField: 'fieldname',\n  facetFields: ['field1', 'field2'...]\n}\n\n\n\n\nor\n\n\nview tile -id 'string' -title 'string'\n  -levelField 'fieldname' -valueField 'fieldname'\n  -valueFormat 'd3FormatString' -timeField 'fieldname'\n  -facetFields ['field1', 'field2'...]\n\n\n\n\nSee \nDefining sink parameters\n\nfor an explanation of how sink parameters can be expressed as object literals.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nRequired?\n\n\n\n\n\n\n\n\n\n\n-id\n\n\nAn identifier for this sink that serves as a handle for referencing the object in Juttle syntax; conceptually identical to a variable name\n\n\nNo\n\n\n\n\n\n\n-title\n\n\nThe title for the user-visible output, if it has one; the value may be any valid Juttle expression that produces a string\n\n\nNo; defaults to the name field that is present in all metrics points\n\n\n\n\n\n\n-levelField\n\n\nThe name of a field whose value is one of the following: \nerror \nDisplay this tile in red text with an alert icon. \nwarning \nDisplay this tile in yellow text with a warning icon. \nsuccess \nDisplay this tile in green text with a success icon. \n\n\nNo; the default display is white text with no icon\n\n\n\n\n\n\n-valueField\n\n\nThe name of the field to use as the source for the numeric values\n\n\nNo; defaults to the \nvalue\n field that is present in all metrics points. If no value field is present, the first numeric field in the stream is used.\n\n\n\n\n\n\n-valueFormat\n\n\nThe format for the tile value, using the \nd3 number formatting syntax\n\n\nNo\n\n\n\n\n\n\n-timeField\n\n\nThe field containing the time stamp\n\n\nNo; defaults to the time field\n\n\n\n\n\n\n-facetFields\n\n\nA comma-separated list of the fields on which facets are based\n\n\nRequired to enable faceting; omit this option to disable facets\n\n\n\n\n\n\n\n\nExample: Simple metric tiles showing data import successes and failures\n\n\nread stochastic -source 'cdn' -last :1 hour: -every :1m:  -source_type 'metrics' name='responses'\n| (\n  filter code = '200'\n  | reduce value = count()\n  | put level = 'success'\n  | view tile -title 'HTTP OK Responses' -display.levelField 'level'\n  ;\n  filter code != '200'\n  | reduce value = count()\n  | put level = 'error'\n  | view tile -title 'HTTP Errors' -display.levelField 'level'\n)\n\n\n\n\n\n\nExample: Render four metric tiles color coded for different levels\n \n\n\nsub fakesource(counter, level) {\n    emit -limit 1 -from :2014-01-01:\n    | put counter=counter, level = level\n}\n\nfakesource -counter 0.99 -level 'success'\n| view tile -o {\n    title: 'Hit Rate',\n    valueFormat: 'e',\n    levelField: 'level',\n    valueField: 'counter'\n};\n\nfakesource -counter 97.5 -level 'warning'\n| view tile -o {\n    title: 'Requests per second',\n    levelField: 'level',\n    valueField: 'counter'\n};\n\nfakesource -counter 125 -level 'info'\n| view tile -o {\n    title: 'Requests per second',\n    valueField: 'counter'\n};\n\nfakesource -counter 3 -level 'error'\n| view tile -o {\n    title: 'Host reboots',\n    valueFormat: 'p',\n    levelField: 'level',\n    valueField: 'counter'\n};\n\n\n\n\n\n\nExample: Display a faceted tile chart\n\n\n// This Juttle program draws a tile visualization showing current, live updating CPU utilization per host.\n// It uses a synthetic data source, but similar code can be used to view real reported CPU usage.\n\nread stochastic -source 'cdn' -from :1 minute ago: -nhosts 3 -every :2s: -source_type 'metrics' name='cpu'\n| view tile -facetFields ['host'] -title 'CPU usage' -valueField 'value' -valueFormat '.2%'", 
            "title": "tile"
        }, 
        {
            "location": "/charts/tile/#tile", 
            "text": "Render a metric tile displaying exactly one value; can be faceted.   view tile -o {\n  id: 'string'\n  title: 'string'\n  levelField: 'fieldname',\n  valueField: 'fieldname',\n  valueFormat: 'd3FormatString',\n  timeField: 'fieldname',\n  facetFields: ['field1', 'field2'...]\n}  or  view tile -id 'string' -title 'string'\n  -levelField 'fieldname' -valueField 'fieldname'\n  -valueFormat 'd3FormatString' -timeField 'fieldname'\n  -facetFields ['field1', 'field2'...]  See  Defining sink parameters \nfor an explanation of how sink parameters can be expressed as object literals.     Parameter  Description  Required?      -id  An identifier for this sink that serves as a handle for referencing the object in Juttle syntax; conceptually identical to a variable name  No    -title  The title for the user-visible output, if it has one; the value may be any valid Juttle expression that produces a string  No; defaults to the name field that is present in all metrics points    -levelField  The name of a field whose value is one of the following:  error  Display this tile in red text with an alert icon.  warning  Display this tile in yellow text with a warning icon.  success  Display this tile in green text with a success icon.   No; the default display is white text with no icon    -valueField  The name of the field to use as the source for the numeric values  No; defaults to the  value  field that is present in all metrics points. If no value field is present, the first numeric field in the stream is used.    -valueFormat  The format for the tile value, using the  d3 number formatting syntax  No    -timeField  The field containing the time stamp  No; defaults to the time field    -facetFields  A comma-separated list of the fields on which facets are based  Required to enable faceting; omit this option to disable facets     Example: Simple metric tiles showing data import successes and failures  read stochastic -source 'cdn' -last :1 hour: -every :1m:  -source_type 'metrics' name='responses'\n| (\n  filter code = '200'\n  | reduce value = count()\n  | put level = 'success'\n  | view tile -title 'HTTP OK Responses' -display.levelField 'level'\n  ;\n  filter code != '200'\n  | reduce value = count()\n  | put level = 'error'\n  | view tile -title 'HTTP Errors' -display.levelField 'level'\n)   Example: Render four metric tiles color coded for different levels    sub fakesource(counter, level) {\n    emit -limit 1 -from :2014-01-01:\n    | put counter=counter, level = level\n}\n\nfakesource -counter 0.99 -level 'success'\n| view tile -o {\n    title: 'Hit Rate',\n    valueFormat: 'e',\n    levelField: 'level',\n    valueField: 'counter'\n};\n\nfakesource -counter 97.5 -level 'warning'\n| view tile -o {\n    title: 'Requests per second',\n    levelField: 'level',\n    valueField: 'counter'\n};\n\nfakesource -counter 125 -level 'info'\n| view tile -o {\n    title: 'Requests per second',\n    valueField: 'counter'\n};\n\nfakesource -counter 3 -level 'error'\n| view tile -o {\n    title: 'Host reboots',\n    valueFormat: 'p',\n    levelField: 'level',\n    valueField: 'counter'\n};   Example: Display a faceted tile chart  // This Juttle program draws a tile visualization showing current, live updating CPU utilization per host.\n// It uses a synthetic data source, but similar code can be used to view real reported CPU usage.\n\nread stochastic -source 'cdn' -from :1 minute ago: -nhosts 3 -every :2s: -source_type 'metrics' name='cpu'\n| view tile -facetFields ['host'] -title 'CPU usage' -valueField 'value' -valueFormat '.2%'", 
            "title": "tile"
        }, 
        {
            "location": "/charts/timechart/", 
            "text": "timechart\n\n\nCreate a time series chart. Time charts support multiple series and can be combined with\n\nview events\n.\n\n\n\n\n\n\nComparing data from different intervals\n\n\nOverlaying events on time charts\n\n\nInteracting with time charts\n\n\nZooming on historical data\n\n\nMulti-series time charts\n\n\nCreating a dual-axis time chart\n\n\n\n\nview timechart -o {\n  id: 'string',\n  title: 'string',\n  duration: duration,\n  markerSize: n,\n  overlayTime: boolean,\n  display: {\n   dataDensity: n\n  },\n  xScale: {\n   label: 'string',\n   tickFormat: 'd3FormatString'\n  },\n  yScales: {\n   primary: {\n    label: 'string',\n    tickFormat: 'd3FormatString',\n    minValue: n,\n    maxValue: n,\n    displayOnAxis: 'left'\n   },\n   secondary: {\n    label: 'string',\n    tickFormat: 'd3FormatString',\n    minValue: n,\n    maxValue: n,\n    displayOnAxis: 'right'\n   }\n  },\n  keyField: 'fieldname',\n  valueField: 'fieldname',\n  timeField: 'fieldname',\n  interval: 'n',\n  series: [\n   {\n    name: 'seriesname',\n    label: 'string',\n    yScale: 'primary|secondary',\n    color: 'color',\n    geom: 'line|bars'\n   }\n  ]\n}   \n\n\n\n\nor\n\n\nview timechart -id 'string' -title 'string' -duration duration -display.dataDensity n -markerSize n -overlayTime boolean\n   -xScale.label 'string' -xScale.tickFormat 'd3FormatString'\n  -yScales.primary.label 'string' -yScales.primary.tickFormat 'd3FormatString' -yScales.primary.minValue 'n' -yScales.primary.maxValue 'n' -yScales.primary.displayOnAxis 'left'\n   -yScales.secondary.label 'string' -yScales.secondary.tickFormat 'd3FormatString' -yScales.secondary.minValue 'n' -yScales.secondary.maxValue 'n' -yScales.secondary.displayOnAxis 'left'\n   -keyField 'fieldname' -valueField 'fieldname' -timeField 'fieldname'\n   -interval n -series [{name : 'seriesname', label : 'string', yScale : 'primary|secondary', color : 'color', geom : 'line|bars'}]\n\n\n\n\nSee \nDefining sink parameters\n\nfor an explanation of how sink parameters can be expressed as object literals.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nRequired?\n\n\n\n\n\n\n\n\n\n\n-id\n\n\nAn identifier for this sink that serves as a handle for referencing the object in Juttle syntax; conceptually identical to a variable name\n\n\nNo\n\n\n\n\n\n\n-title\n\n\nThe title for the user-visible output, if it has one; the value may be any valid Juttle expression that produces a string\n\n\nNo; defaults to the name field that is present in all metrics points\n\n\n\n\n\n\n-duration\n\n\nThe span of time to display, either in seconds (\n=10) or as a Juttle moment literal. \nThis feature can also be used for comparing data from multiple intervals, such as this week's Web traffic versus last week's. This is done by setting the -overlayTime flag to true.\n\n\nNo\n\n\n\n\n\n\n-display.dataDensity\n\n\nThe minimum number of pixels between points, for data downsampling\n\n\nNo; defaults to 5\n\n\n\n\n\n\n-markerSize\n\n\nhe diameter of the circle representing each point, in pixels \nWhen your data is not very dense, the chart renders distinctly separate circles connecting by a one-pixel line. For denser data, circles may be rendered close together, giving the appearance of a continuous line of the specified thickness.  \n\n\nNo; defaults to 0 (circle not shown)\n\n\n\n\n\n\n-overlayTime\n\n\nWhether the -duration value should be used to overlay time ranges. When true, the value of -duration drives the time-length of each overlayed range.\n\n\nNo; defaults to false\n\n\n\n\n\n\n-xScale.label\n\n\nThe string that labels the X scale\n\n\nNo; defaults to the value of the \ntime\n field\n\n\n\n\n\n\n-xScale.tickFormat\n\n\nCustomize the unit display for this axis, using the \nd3 number formatting syntax\n\n\nNo\n\n\n\n\n\n\n-yScales.primary.label\n\n\nA string to label the Y axis\n\n\nNo; default is the name of the \n-valueField\n\n\n\n\n\n\n-yScales.primary.tickFormat\n\n\nCustomize the unit display for the Y axis, using the \nd3 number formatting syntax\n\n\nNo\n\n\n\n\n\n\n-yScales.primary.minValue\n\n\nThe value at the bottom of the Y scale\n\n\nNo; the default is automatically derived from your data\n\n\n\n\n\n\n-yScales.primary.maxValue\n\n\nThe value at the top of the Y scale\n\n\nNo; the default is automatically derived from your data\n\n\n\n\n\n\n-yScales.primary.displayOnAxis\n\n\nWhere to display the Y axis; must be exactly one of the following depending on whether your bar chart is oriented vertically or horizontally: \nleft\nright\n\n\nNo; the default is left\n\n\n\n\n\n\n-yScales.secondary.label\n\n\nThe string that labels the secondary Y scale\n\n\nNo; by default no label is displayed\n\n\n\n\n\n\n-yScales.secondary.tickFormat\n\n\nCustomize the unit display for this axis, using the \nd3 number formatting syntax\n\n\nNo\n\n\n\n\n\n\n-yScales.secondary.minValue\n\n\nThe value at the bottom of the Y scale\n\n\nNo; the default is automatically derived from your data\n\n\n\n\n\n\n-yScales.secondary.maxValue\n\n\nThe value at the top of the Y scale\n\n\nNo; the default is automatically derived from your data\n\n\n\n\n\n\n-yScales.secondary.displayOnAxis\n\n\nThe axis on which to display this scale, either 'left' or 'right'\n\n\nNo; defaults to 'left'\n\n\n\n\n\n\n-keyField\n\n\nThe field containing the name of the series to which each point belongs\n\n\nRequired when series is configured; otherwise Jut looks for unique streams and creates a series for each one \nFor simple metrics, the key field usually defaults to the \nname\n field that is present in all metrics points\n\n\n\n\n\n\n-valueField\n\n\nThe name of the field to use as the source for the numeric values\n\n\nNo; defaults to the \nvalue\n field that is present in all metrics points. If no value field is present, the first numeric field in the stream is used.\n\n\n\n\n\n\n-timeField\n\n\nThe field containing the time stamp\n\n\nNo; defaults to the time field\n\n\n\n\n\n\n-interval\n\n\nThe duration threshold between two consecutive points, above which they will not be connected by a line\n\n\nNo; all points are connected by lines\n\n\n\n\n\n\n-series\n\n\nConfigure one or more data series individually, using one or more items in an array with these parameters:\n\n\nNo\n\n\n\n\n\n\n\n\n   -series [   \n   {   \n    name : 'seriesname',   \n    label : 'string',   \n    yScale : 'primary|secondary',   \n    color : 'color',   \n    geom : 'line|bars'   \n   },   \n   {   \n    name : 'someotherseries',   \n   ...   \n   }   \n  ]   \n\n\n\n\nSeries Parameters\n\n\n\n\n\n\n\n\n-series\n Parameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA series name that can be found in the specified \n-keyField\n; omit this option to configure all series in the data set\n\n\n\n\n\n\nlabel\n\n\nAn optional string to override the scale label for this series\n\n\n\n\n\n\nyScale\n\n\nThe Y scale to use for this series, either \"primary\" or \"secondary\"; the default is \"primary\"\n\n\n\n\n\n\ncolor\n\n\nThe color to use for this series, specified with any \nCSS3-supported hex or name value\n; if not specified, a color is selected from the built-in palette\n\n\n\n\n\n\ngeom\n\n\nSet this to \n'bars'\n to display this series as bars on the time chart; the width of each bar is the interval between the current point and the previous point. The default is \n'line'\n.\n\n\n\n\n\n\n\n\nExample: Timechart with default series selection\n\n\nread stochastic -source 'cdn' -last :1 hour: -nhosts 3 -source_type 'metric' name='cpu'\n| view timechart \n    -title '% CPU busy on all hosts' \n    -yScales.primary.tickFormat '%'\n\n\n\n\n\n\nExample: Compare yesterday's CPU usage with usage today so far\n \n\n\nread stochastic -source 'cdn' -source_type 'metric' -last :2 days: -daily .5 name = 'cpu'\n| view timechart\n    -duration :1 day:\n    -overlayTime true\n\n\n\n\n\n\nExample: Compare CPU usage from today with the same day last week\n \n\n\n(\nread stochastic -source 'cdn' -from :7 days ago: -to :6 days ago: -daily .5  -source_type 'metrics' name = 'cpu';\nread stochastic -source 'cdn' -from :1 days ago: -to :now: -daily .5  -source_type 'metrics' name = 'cpu'\n)\n| view timechart\n    -duration :1 day:\n    -overlayTime true\n\n\n\n\n\n\nExample: Configure a multi-series time chart\n \n\n\nsub src(cate, coefficient) {\n  emit -limit 100 -hz 10 |\n  put category = cate       |\n  put value = Math.random() * coefficient\n}\n\n(\nsrc -cate \nsmaug\n   -coefficient 10;\nsrc -cate \nsauron\n  -coefficient 20;\nsrc -cate \nsaruman\n -coefficient 1;\n) |\nview timechart -o {\n  keyField: 'category',\n  yScales: {\n    secondary: {}\n  },\n  series: [\n  {\n    label  : 'smaug',\n    color  : 'red',\n    name   : 'smaug'\n  },\n  {\n    label  : 'sauron',\n    color  : '#228B22',\n    name   : 'sauron'\n  },\n  {\n    label  : 'saruman',\n    color  : 'burlywood',\n    name   : 'saruman',\n    yScale : 'secondary'\n  }\n  ]\n}\n\n\n\n\n\n\nExample: Configure one series to be displayed as bars, while others are displayed as lines\n\n\nread stochastic -source 'srch_cluster' -from :2 minutes ago:           // Get data from 2 minutes ago and ingest live data\n   name = 'response_ms'                                         // Filter our all metrics except response_ms\n| reduce -every :2s: p90 = percentile('value', .9) by service   // Calculate p90 response time\n| view timechart -valueField 'p90'                                  // Plot data on a chart\n  -title 'Response time (ms) by Service'\n  -series [{name : 'search', geom : 'bars'}]\n  -duration :2 minutes:", 
            "title": "timechart"
        }, 
        {
            "location": "/charts/timechart/#timechart", 
            "text": "Create a time series chart. Time charts support multiple series and can be combined with view events .    Comparing data from different intervals  Overlaying events on time charts  Interacting with time charts  Zooming on historical data  Multi-series time charts  Creating a dual-axis time chart   view timechart -o {\n  id: 'string',\n  title: 'string',\n  duration: duration,\n  markerSize: n,\n  overlayTime: boolean,\n  display: {\n   dataDensity: n\n  },\n  xScale: {\n   label: 'string',\n   tickFormat: 'd3FormatString'\n  },\n  yScales: {\n   primary: {\n    label: 'string',\n    tickFormat: 'd3FormatString',\n    minValue: n,\n    maxValue: n,\n    displayOnAxis: 'left'\n   },\n   secondary: {\n    label: 'string',\n    tickFormat: 'd3FormatString',\n    minValue: n,\n    maxValue: n,\n    displayOnAxis: 'right'\n   }\n  },\n  keyField: 'fieldname',\n  valueField: 'fieldname',\n  timeField: 'fieldname',\n  interval: 'n',\n  series: [\n   {\n    name: 'seriesname',\n    label: 'string',\n    yScale: 'primary|secondary',\n    color: 'color',\n    geom: 'line|bars'\n   }\n  ]\n}     or  view timechart -id 'string' -title 'string' -duration duration -display.dataDensity n -markerSize n -overlayTime boolean\n   -xScale.label 'string' -xScale.tickFormat 'd3FormatString'\n  -yScales.primary.label 'string' -yScales.primary.tickFormat 'd3FormatString' -yScales.primary.minValue 'n' -yScales.primary.maxValue 'n' -yScales.primary.displayOnAxis 'left'\n   -yScales.secondary.label 'string' -yScales.secondary.tickFormat 'd3FormatString' -yScales.secondary.minValue 'n' -yScales.secondary.maxValue 'n' -yScales.secondary.displayOnAxis 'left'\n   -keyField 'fieldname' -valueField 'fieldname' -timeField 'fieldname'\n   -interval n -series [{name : 'seriesname', label : 'string', yScale : 'primary|secondary', color : 'color', geom : 'line|bars'}]  See  Defining sink parameters \nfor an explanation of how sink parameters can be expressed as object literals.     Parameter  Description  Required?      -id  An identifier for this sink that serves as a handle for referencing the object in Juttle syntax; conceptually identical to a variable name  No    -title  The title for the user-visible output, if it has one; the value may be any valid Juttle expression that produces a string  No; defaults to the name field that is present in all metrics points    -duration  The span of time to display, either in seconds ( =10) or as a Juttle moment literal.  This feature can also be used for comparing data from multiple intervals, such as this week's Web traffic versus last week's. This is done by setting the -overlayTime flag to true.  No    -display.dataDensity  The minimum number of pixels between points, for data downsampling  No; defaults to 5    -markerSize  he diameter of the circle representing each point, in pixels  When your data is not very dense, the chart renders distinctly separate circles connecting by a one-pixel line. For denser data, circles may be rendered close together, giving the appearance of a continuous line of the specified thickness.    No; defaults to 0 (circle not shown)    -overlayTime  Whether the -duration value should be used to overlay time ranges. When true, the value of -duration drives the time-length of each overlayed range.  No; defaults to false    -xScale.label  The string that labels the X scale  No; defaults to the value of the  time  field    -xScale.tickFormat  Customize the unit display for this axis, using the  d3 number formatting syntax  No    -yScales.primary.label  A string to label the Y axis  No; default is the name of the  -valueField    -yScales.primary.tickFormat  Customize the unit display for the Y axis, using the  d3 number formatting syntax  No    -yScales.primary.minValue  The value at the bottom of the Y scale  No; the default is automatically derived from your data    -yScales.primary.maxValue  The value at the top of the Y scale  No; the default is automatically derived from your data    -yScales.primary.displayOnAxis  Where to display the Y axis; must be exactly one of the following depending on whether your bar chart is oriented vertically or horizontally:  left right  No; the default is left    -yScales.secondary.label  The string that labels the secondary Y scale  No; by default no label is displayed    -yScales.secondary.tickFormat  Customize the unit display for this axis, using the  d3 number formatting syntax  No    -yScales.secondary.minValue  The value at the bottom of the Y scale  No; the default is automatically derived from your data    -yScales.secondary.maxValue  The value at the top of the Y scale  No; the default is automatically derived from your data    -yScales.secondary.displayOnAxis  The axis on which to display this scale, either 'left' or 'right'  No; defaults to 'left'    -keyField  The field containing the name of the series to which each point belongs  Required when series is configured; otherwise Jut looks for unique streams and creates a series for each one  For simple metrics, the key field usually defaults to the  name  field that is present in all metrics points    -valueField  The name of the field to use as the source for the numeric values  No; defaults to the  value  field that is present in all metrics points. If no value field is present, the first numeric field in the stream is used.    -timeField  The field containing the time stamp  No; defaults to the time field    -interval  The duration threshold between two consecutive points, above which they will not be connected by a line  No; all points are connected by lines    -series  Configure one or more data series individually, using one or more items in an array with these parameters:  No        -series [   \n   {   \n    name : 'seriesname',   \n    label : 'string',   \n    yScale : 'primary|secondary',   \n    color : 'color',   \n    geom : 'line|bars'   \n   },   \n   {   \n    name : 'someotherseries',   \n   ...   \n   }   \n  ]", 
            "title": "timechart"
        }, 
        {
            "location": "/charts/timechart/#series-parameters", 
            "text": "-series  Parameter  Description      name  A series name that can be found in the specified  -keyField ; omit this option to configure all series in the data set    label  An optional string to override the scale label for this series    yScale  The Y scale to use for this series, either \"primary\" or \"secondary\"; the default is \"primary\"    color  The color to use for this series, specified with any  CSS3-supported hex or name value ; if not specified, a color is selected from the built-in palette    geom  Set this to  'bars'  to display this series as bars on the time chart; the width of each bar is the interval between the current point and the previous point. The default is  'line' .     Example: Timechart with default series selection  read stochastic -source 'cdn' -last :1 hour: -nhosts 3 -source_type 'metric' name='cpu'\n| view timechart \n    -title '% CPU busy on all hosts' \n    -yScales.primary.tickFormat '%'   Example: Compare yesterday's CPU usage with usage today so far    read stochastic -source 'cdn' -source_type 'metric' -last :2 days: -daily .5 name = 'cpu'\n| view timechart\n    -duration :1 day:\n    -overlayTime true   Example: Compare CPU usage from today with the same day last week    (\nread stochastic -source 'cdn' -from :7 days ago: -to :6 days ago: -daily .5  -source_type 'metrics' name = 'cpu';\nread stochastic -source 'cdn' -from :1 days ago: -to :now: -daily .5  -source_type 'metrics' name = 'cpu'\n)\n| view timechart\n    -duration :1 day:\n    -overlayTime true   Example: Configure a multi-series time chart    sub src(cate, coefficient) {\n  emit -limit 100 -hz 10 |\n  put category = cate       |\n  put value = Math.random() * coefficient\n}\n\n(\nsrc -cate  smaug    -coefficient 10;\nsrc -cate  sauron   -coefficient 20;\nsrc -cate  saruman  -coefficient 1;\n) |\nview timechart -o {\n  keyField: 'category',\n  yScales: {\n    secondary: {}\n  },\n  series: [\n  {\n    label  : 'smaug',\n    color  : 'red',\n    name   : 'smaug'\n  },\n  {\n    label  : 'sauron',\n    color  : '#228B22',\n    name   : 'sauron'\n  },\n  {\n    label  : 'saruman',\n    color  : 'burlywood',\n    name   : 'saruman',\n    yScale : 'secondary'\n  }\n  ]\n}   Example: Configure one series to be displayed as bars, while others are displayed as lines  read stochastic -source 'srch_cluster' -from :2 minutes ago:           // Get data from 2 minutes ago and ingest live data\n   name = 'response_ms'                                         // Filter our all metrics except response_ms\n| reduce -every :2s: p90 = percentile('value', .9) by service   // Calculate p90 response time\n| view timechart -valueField 'p90'                                  // Plot data on a chart\n  -title 'Response time (ms) by Service'\n  -series [{name : 'search', geom : 'bars'}]\n  -duration :2 minutes:", 
            "title": "Series Parameters"
        }, 
        {
            "location": "/charts/timechart_overlay/", 
            "text": "Overlaying events on time charts\n\n\nComparing data from different intervals\n\n\n\n\n\n\nOverlaying events on time charts\n\n\nThe \nevents\n\noutput can be overlaid on a\n\ntimechart\n\nto produce a single visual output. You can imagine the resulting\nvisualization as having two layers.\n\n\nChart overlays must observe the following rules:\n\n\n\n\nOnly charts with the same X axis may be overlaid.\n\n\nThe top or overlaid chart will create a second Y axis on right hand\n    side of chart.\n\n\n\n\nOnly the title of the bottom chart will display; the title parameter\n    of the top chart will be ignored.\n\n\n\n\n\n\nCreate two flows: one that ends with\n    view \nevents\n\n    and one that ends with\n    view \ntimechart\n.\n\n\n\n\n\n\nGive an \n-id\n parameter to your view timechart, with any arbitrary string as\n    its value.\n\n\nAll \nvisual outputs\n\naccept an \n-id\n parameter, but currently only view timechart supports overlays.\n\n\n\n\n\n\nGive an \n-on\n parameter to the events view, with the value of your time chart's ID.\n\n\n\n\n\n\nExample: Overlay two series of \"git merge\" events on a timechart showing CPU load\n\n\nconst spiketime1 = :7 minutes before 2014-01-01:;\nconst spiketime2 = :3 minutes before 2014-01-01:;\n\nreducer spike_cpu(valfield,hostname,time) {\n\n    // workaround for PROD-5118, once its fixed we can remove this const redefinition\n    const spiketime1 = :7 minutes before 2014-01-01:;\n    const spiketime2 = :3 minutes before 2014-01-01:;\n\n    var spike1 = 0;\n    var spike2 = 0;\n    var val = 0;\n\n    function update() {\n        if (*time \n spiketime1) {\n        spike1 = 1;\n        }\n        if (*time \n spiketime2) {\n        spike2 = 1;\n        }\n        if ((*hostname == \nnyc.2\n) \n spike1 != 0) {\n        val = *valfield + 0.5;\n        } else {\n        if ((*hostname == \nsea.0\n) \n spike2 != 0) {\n            val = *valfield + 0.2;\n        } else {\n            val = *valfield;\n        }\n        }\n    }\n\n    function result() {\n        return val;\n    }\n\n}\n\nread stochastic -source 'cdn' -nhosts 3 -from :10 minutes before 2014-01-01: -to :2014-01-01: -source_type 'metrics' name = 'cpu'\n|filter name = 'cpu'\n|put value=spike_cpu(value,host,time)\n|  view timechart\n     -valueField 'value'\n     -keyField 'host'\n     -yScales.primary.tickFormat '%'\n     -title \n% CPU busy on all hosts\n\n     -id 'CPU';\n\nemit -limit 1 -from spiketime1\n| put title = \ntitle\n,type = \ngit\n,text = \nEnable new CPU-consuming service in New York\n,label = \ngit merge\n\n| view events\n    -on \nCPU\n\n    -typeField \ntype\n\n    -timeField \ntime\n\n    -messageField \ntext\n\n    -nameField \nlabel\n;\n\nemit -limit 1 -from spiketime2\n| put title = \ntitle\n,type = \ngit\n,text = \nSomething that thrashes the CPU in Seattle\n,label = \ngit merge\n\n| view events\n    -on \nCPU\n -typeField \ntype\n\n    -timeField \ntime\n\n    -messageField \ntext\n\n    -nameField \nlabel\n;\n\n\n\n\n\n\n\n\nComparing data from different intervals\n\n\nSometimes you want to compare data from different time periods by\noverlaying them in one time chart.\n\n\nFor example, imagine you want to see November's daily online store\npurchases compared to December's in order to see how they're affected by\nthe Christmas holiday. You can do this with the\n\n-duration\n\nand\n\n-overlayTime\n\nparameters.\n\n\nYou can see this feature illustrated in the examples below.\n\n\nExample: Compare yesterday's CPU usage with usage today so far\n\n\nread stochastic -source 'cdn' -source_type 'metric' -last :2 days: -daily .5 name = 'cpu'\n| view timechart\n    -duration :1 day:\n    -overlayTime true\n\n\n\n\n\n\nExample: Compare CPU usage from today with the same day last week\n\n\n(\nread stochastic -source 'cdn' -from :7 days ago: -to :6 days ago: -daily .5  -source_type 'metrics' name = 'cpu';\nread stochastic -source 'cdn' -from :1 days ago: -to :now: -daily .5  -source_type 'metrics' name = 'cpu'\n)\n| view timechart\n    -duration :1 day:\n    -overlayTime true", 
            "title": "____ Timechart Overlalys"
        }, 
        {
            "location": "/charts/timechart_overlay/#overlaying-events-on-time-charts", 
            "text": "The  events \noutput can be overlaid on a timechart \nto produce a single visual output. You can imagine the resulting\nvisualization as having two layers.  Chart overlays must observe the following rules:   Only charts with the same X axis may be overlaid.  The top or overlaid chart will create a second Y axis on right hand\n    side of chart.   Only the title of the bottom chart will display; the title parameter\n    of the top chart will be ignored.    Create two flows: one that ends with\n    view  events \n    and one that ends with\n    view  timechart .    Give an  -id  parameter to your view timechart, with any arbitrary string as\n    its value.  All  visual outputs \naccept an  -id  parameter, but currently only view timechart supports overlays.    Give an  -on  parameter to the events view, with the value of your time chart's ID.    Example: Overlay two series of \"git merge\" events on a timechart showing CPU load  const spiketime1 = :7 minutes before 2014-01-01:;\nconst spiketime2 = :3 minutes before 2014-01-01:;\n\nreducer spike_cpu(valfield,hostname,time) {\n\n    // workaround for PROD-5118, once its fixed we can remove this const redefinition\n    const spiketime1 = :7 minutes before 2014-01-01:;\n    const spiketime2 = :3 minutes before 2014-01-01:;\n\n    var spike1 = 0;\n    var spike2 = 0;\n    var val = 0;\n\n    function update() {\n        if (*time   spiketime1) {\n        spike1 = 1;\n        }\n        if (*time   spiketime2) {\n        spike2 = 1;\n        }\n        if ((*hostname ==  nyc.2 )   spike1 != 0) {\n        val = *valfield + 0.5;\n        } else {\n        if ((*hostname ==  sea.0 )   spike2 != 0) {\n            val = *valfield + 0.2;\n        } else {\n            val = *valfield;\n        }\n        }\n    }\n\n    function result() {\n        return val;\n    }\n\n}\n\nread stochastic -source 'cdn' -nhosts 3 -from :10 minutes before 2014-01-01: -to :2014-01-01: -source_type 'metrics' name = 'cpu'\n|filter name = 'cpu'\n|put value=spike_cpu(value,host,time)\n|  view timechart\n     -valueField 'value'\n     -keyField 'host'\n     -yScales.primary.tickFormat '%'\n     -title  % CPU busy on all hosts \n     -id 'CPU';\n\nemit -limit 1 -from spiketime1\n| put title =  title ,type =  git ,text =  Enable new CPU-consuming service in New York ,label =  git merge \n| view events\n    -on  CPU \n    -typeField  type \n    -timeField  time \n    -messageField  text \n    -nameField  label ;\n\nemit -limit 1 -from spiketime2\n| put title =  title ,type =  git ,text =  Something that thrashes the CPU in Seattle ,label =  git merge \n| view events\n    -on  CPU  -typeField  type \n    -timeField  time \n    -messageField  text \n    -nameField  label ;", 
            "title": "Overlaying events on time charts"
        }, 
        {
            "location": "/charts/timechart_overlay/#comparing-data-from-different-intervals", 
            "text": "Sometimes you want to compare data from different time periods by\noverlaying them in one time chart.  For example, imagine you want to see November's daily online store\npurchases compared to December's in order to see how they're affected by\nthe Christmas holiday. You can do this with the -duration \nand -overlayTime \nparameters.  You can see this feature illustrated in the examples below.  Example: Compare yesterday's CPU usage with usage today so far  read stochastic -source 'cdn' -source_type 'metric' -last :2 days: -daily .5 name = 'cpu'\n| view timechart\n    -duration :1 day:\n    -overlayTime true   Example: Compare CPU usage from today with the same day last week  (\nread stochastic -source 'cdn' -from :7 days ago: -to :6 days ago: -daily .5  -source_type 'metrics' name = 'cpu';\nread stochastic -source 'cdn' -from :1 days ago: -to :now: -daily .5  -source_type 'metrics' name = 'cpu'\n)\n| view timechart\n    -duration :1 day:\n    -overlayTime true", 
            "title": "Comparing data from different intervals"
        }, 
        {
            "location": "/charts/timechart_interactive/", 
            "text": "Interacting with time charts\n\n\nTime charts come with some interactive features that require no\nconfiguration.\n\n\nHere's a sample time chart that you can use to try the features\ndescribed below:\n\n\nread stochastic\n  -source 'cdn'\n  -last :hour:\n  -nhosts '12' -dos .1\n  name='cpu'\n| view timechart -keyField 'host' -title \nCPU by host\n\n\n\n\n\nFiltering by series\n\n\nEvery multi-series time chart includes a series filter. Enter any\nstring or substring and press Enter to isolate one or more series;\nnon-matching series are hidden. Click the 'x'\n\n or simply delete the\nstring to clear the filter. This is especially useful when your time\nchart includes a number of series that all overlap, as in the\nexample above.\n\n\nCollapsing the legend\n\n\nIf a time chart's legend is verbose, you may find it occupying too\nmuch of the canvas. Just click the chevron\n\n next to the\nlegend to collapse it. Try it in the example above.\n\n\nZooming on historical data\n\n\nWhen a time chart contains historical data only, it also displays a\ncontext chart at the bottom that allows you to zoom in on a smaller\nportion of the chart for closer inspection.\n\n\nClick and drag across the context chart to select a segment of the\nchart to zoom on. Once you've drawn a rectangle in the context\nchart, you can drag the rectangle left or right. Click outside the\nselected rectangle to reset the zoom.\n\n\nPinning and copying tooltips\n\n\nYou can click anywhere in a time chart to pin and copy values out of\nthe tooltip. Click somewhere else in the chart to unpin it.\n\n\nPausing a live streaming chart\n\n\nYou can pause a time chart by hovering over the chart. Move your\npointer outside the chart to resume the chart's animation. Here's a\nlive chart you can use to try it:\n\n\nemit -limit 100 | put v = Math.random() | view timechart -duration :10s: -title \nLive Random Numbers", 
            "title": "____ Interactive Timecharts"
        }, 
        {
            "location": "/charts/timechart_interactive/#interacting-with-time-charts", 
            "text": "Time charts come with some interactive features that require no\nconfiguration.  Here's a sample time chart that you can use to try the features\ndescribed below:  read stochastic\n  -source 'cdn'\n  -last :hour:\n  -nhosts '12' -dos .1\n  name='cpu'\n| view timechart -keyField 'host' -title  CPU by host", 
            "title": "Interacting with time charts"
        }, 
        {
            "location": "/charts/timechart_interactive/#filtering-by-series", 
            "text": "Every multi-series time chart includes a series filter. Enter any\nstring or substring and press Enter to isolate one or more series;\nnon-matching series are hidden. Click the 'x'  or simply delete the\nstring to clear the filter. This is especially useful when your time\nchart includes a number of series that all overlap, as in the\nexample above.", 
            "title": "Filtering by series"
        }, 
        {
            "location": "/charts/timechart_interactive/#collapsing-the-legend", 
            "text": "If a time chart's legend is verbose, you may find it occupying too\nmuch of the canvas. Just click the chevron  next to the\nlegend to collapse it. Try it in the example above.", 
            "title": "Collapsing the legend"
        }, 
        {
            "location": "/charts/timechart_interactive/#zooming-on-historical-data", 
            "text": "When a time chart contains historical data only, it also displays a\ncontext chart at the bottom that allows you to zoom in on a smaller\nportion of the chart for closer inspection.  Click and drag across the context chart to select a segment of the\nchart to zoom on. Once you've drawn a rectangle in the context\nchart, you can drag the rectangle left or right. Click outside the\nselected rectangle to reset the zoom.", 
            "title": "Zooming on historical data"
        }, 
        {
            "location": "/charts/timechart_interactive/#pinning-and-copying-tooltips", 
            "text": "You can click anywhere in a time chart to pin and copy values out of\nthe tooltip. Click somewhere else in the chart to unpin it.", 
            "title": "Pinning and copying tooltips"
        }, 
        {
            "location": "/charts/timechart_interactive/#pausing-a-live-streaming-chart", 
            "text": "You can pause a time chart by hovering over the chart. Move your\npointer outside the chart to resume the chart's animation. Here's a\nlive chart you can use to try it:  emit -limit 100 | put v = Math.random() | view timechart -duration :10s: -title  Live Random Numbers", 
            "title": "Pausing a live streaming chart"
        }, 
        {
            "location": "/charts/timechart_zoom/", 
            "text": "Zooming on historical data\n\n\nWhen a time chart contains historical data only, it also displays a\ncontext chart at the bottom that allows you to zoom in on a smaller\nportion of the chart for closer inspection.\n\n\nClick and drag across the context chart to select a segment of the chart\nto zoom in:\n\n\n\nOnce you've drawn a rectangle in the context chart, you can drag the\nrectangle left or right. Click outside the selected rectangle to reset\nthe zoom.", 
            "title": "____ Zoom on Timecharts"
        }, 
        {
            "location": "/charts/timechart_zoom/#zooming-on-historical-data", 
            "text": "When a time chart contains historical data only, it also displays a\ncontext chart at the bottom that allows you to zoom in on a smaller\nportion of the chart for closer inspection.  Click and drag across the context chart to select a segment of the chart\nto zoom in:  \nOnce you've drawn a rectangle in the context chart, you can drag the\nrectangle left or right. Click outside the selected rectangle to reset\nthe zoom.", 
            "title": "Zooming on historical data"
        }, 
        {
            "location": "/charts/timechart_multi_series/", 
            "text": "Multi-series time charts\n\n\nA multi-series time chart displays multiple time series that share the\nsame scales for both the horizontal (time) and vertical (value) axes.\n\n\nFor charts that display multiple time series, there are two different\nways to structure data:\n\n\n\n\nBy the values of different fields inside individual points\n\n\nBy referring to a single field, distinguished by the value of\n    another field\n\n\n\n\nBoth styles produce identical-looking charts. The style you choose\ndepends on how data is naturally organized in your Juttle program.\n\n\nThe series on a multi-series chart are displayed in distinctive colors\nby default, but the colors may also be specified explicitly.  \n\n\nFor a multi-series chart using field names, the \n-colors\n parameter gives a comma-separated list of colors (that must be the same length as the \n-columns\n list), using any valid CSS color.  \n\n\nFor a chart using the \n-by\n parameter, the \n-colorField\n parameter specifies a field in which the color may be found. See \ntimechart\n\nfor complete information about parameters.\n\n\nExample: configuring colors for time series\n\n\nsub src(cate, coefficient) {\n  emit -limit 100 -hz 10 |\n  put category = cate       |\n  put value = Math.random() * coefficient\n}\n\n(\nsrc -cate \nsmaug\n   -coefficient 10;\nsrc -cate \nsauron\n  -coefficient 20;\nsrc -cate \nsaruman\n -coefficient 1;\n) |\nview timechart -o {\n  keyField: 'category',\n  yScales: {\n    secondary: {}\n  },\n  series: [\n  {\n    label  : 'smaug',\n    color  : 'red',\n    name   : 'smaug'\n  },\n  {\n    label  : 'sauron',\n    color  : '#228B22',\n    name   : 'sauron'\n  },\n  {\n    label  : 'saruman',\n    color  : 'burlywood',\n    name   : 'saruman',\n    yScale : 'secondary'\n  }\n  ]\n}\n\n\n\n\n\n\nExample: another method for configuring colors for time series\n\n\n// approach 1: split points to get separate series\n// use default colors\nread stochastic -source 'cdn' -from :-1m: -every :2s: -source_type 'metrics' name='cpu'\n| reduce -every :10s: time = first(time), min = min(value), max = max(value), avg = avg(value)\n| split min, avg, max\n| view timechart;\n\n// approach 2: split points to get separate series\n// assign custom color to each series\nread stochastic -source 'cdn' -from :-1m: -every :2s: -source_type 'metrics' name='cpu'\n| reduce -every :10s: time = first(time), min = min(value), max = max(value), avg = avg(value)\n| split min, avg, max\n| view timechart -series [\n    {name: 'min', color: 'yellow'},\n    {name: 'avg', color: 'blue'},\n    {name: 'max', color: 'red'}\n  ];\n\n// approach 3: derive series from reducing by a field\n// (unique values of that field define individual series)\n// assign custom colors via function\nfunction getcolor(pop) {\n    if (pop == 'sea') { return 'green'; }\n    if (pop == 'sjc') { return 'lightblue'; }\n    if (pop == 'nyc') { return 'white'; }\n    return 'red';\n}\nread stochastic -source 'cdn' -from :-1m: -every :2s: -nhosts 3 -source_type 'metrics' name='response_ms'\n| reduce -every :10s: value=max(value) by pop\n| put color = getcolor(pop)\n| view timechart -series [\n    {name: 'sea', color: getcolor('sea')},\n    {name: 'sjc', color: getcolor('sjc')},\n    {name: 'nyc', color: getcolor('nyc')}\n    ];", 
            "title": "____ Multi Series Timecharts"
        }, 
        {
            "location": "/charts/timechart_multi_series/#multi-series-time-charts", 
            "text": "A multi-series time chart displays multiple time series that share the\nsame scales for both the horizontal (time) and vertical (value) axes.  For charts that display multiple time series, there are two different\nways to structure data:   By the values of different fields inside individual points  By referring to a single field, distinguished by the value of\n    another field   Both styles produce identical-looking charts. The style you choose\ndepends on how data is naturally organized in your Juttle program.  The series on a multi-series chart are displayed in distinctive colors\nby default, but the colors may also be specified explicitly.    For a multi-series chart using field names, the  -colors  parameter gives a comma-separated list of colors (that must be the same length as the  -columns  list), using any valid CSS color.    For a chart using the  -by  parameter, the  -colorField  parameter specifies a field in which the color may be found. See  timechart \nfor complete information about parameters.  Example: configuring colors for time series  sub src(cate, coefficient) {\n  emit -limit 100 -hz 10 |\n  put category = cate       |\n  put value = Math.random() * coefficient\n}\n\n(\nsrc -cate  smaug    -coefficient 10;\nsrc -cate  sauron   -coefficient 20;\nsrc -cate  saruman  -coefficient 1;\n) |\nview timechart -o {\n  keyField: 'category',\n  yScales: {\n    secondary: {}\n  },\n  series: [\n  {\n    label  : 'smaug',\n    color  : 'red',\n    name   : 'smaug'\n  },\n  {\n    label  : 'sauron',\n    color  : '#228B22',\n    name   : 'sauron'\n  },\n  {\n    label  : 'saruman',\n    color  : 'burlywood',\n    name   : 'saruman',\n    yScale : 'secondary'\n  }\n  ]\n}   Example: another method for configuring colors for time series  // approach 1: split points to get separate series\n// use default colors\nread stochastic -source 'cdn' -from :-1m: -every :2s: -source_type 'metrics' name='cpu'\n| reduce -every :10s: time = first(time), min = min(value), max = max(value), avg = avg(value)\n| split min, avg, max\n| view timechart;\n\n// approach 2: split points to get separate series\n// assign custom color to each series\nread stochastic -source 'cdn' -from :-1m: -every :2s: -source_type 'metrics' name='cpu'\n| reduce -every :10s: time = first(time), min = min(value), max = max(value), avg = avg(value)\n| split min, avg, max\n| view timechart -series [\n    {name: 'min', color: 'yellow'},\n    {name: 'avg', color: 'blue'},\n    {name: 'max', color: 'red'}\n  ];\n\n// approach 3: derive series from reducing by a field\n// (unique values of that field define individual series)\n// assign custom colors via function\nfunction getcolor(pop) {\n    if (pop == 'sea') { return 'green'; }\n    if (pop == 'sjc') { return 'lightblue'; }\n    if (pop == 'nyc') { return 'white'; }\n    return 'red';\n}\nread stochastic -source 'cdn' -from :-1m: -every :2s: -nhosts 3 -source_type 'metrics' name='response_ms'\n| reduce -every :10s: value=max(value) by pop\n| put color = getcolor(pop)\n| view timechart -series [\n    {name: 'sea', color: getcolor('sea')},\n    {name: 'sjc', color: getcolor('sjc')},\n    {name: 'nyc', color: getcolor('nyc')}\n    ];", 
            "title": "Multi-series time charts"
        }, 
        {
            "location": "/charts/timechart_dual_axis/", 
            "text": "Creating a dual-axis time chart\n\n\nA time chart can have one Y axis or two. A dual-axis time chart is a\nmulti-series time chart in which some of the series have a different Y\nscale than the others.\n\n\n\n\n\n\nIn your @\ntimechart\n,\n    use the \nyScales.primary.*\n and \nyScales.secondary.*\n parameters\n    to configure the two Y scales.  \n\n\nOne must include displayOnAxis: 'right'.\n\n\n\n\n\n\nUse the \nseries.yScale\n parameter to configure\n    the data series that belong to the secondary Y scale.\n\n\nSince primary is the default value, you only need to specify this\nparameter for the series that belong to the secondary scale.\n\n\n\n\n\n\nExample: Create a time chart in which the 'saruman' series uses the right-hand Y axis and all others use the left-hand Y axis\n\n\nsub src(cate, coefficient) {\n  emit -limit 100 -hz 10 |\n  put category = cate       |\n  put value = Math.random() * coefficient\n}\n\n(\nsrc -cate \nsmaug\n   -coefficient 10;\nsrc -cate \nsauron\n  -coefficient 20;\nsrc -cate \nsaruman\n -coefficient 1;\n) |\nview timechart -o {\n  keyField: 'category',\n  yScales: {\n    secondary: {}\n  },\n  series: [\n  {\n    label  : 'smaug',\n    color  : 'red',\n    name   : 'smaug'\n  },\n  {\n    label  : 'sauron',\n    color  : '#228B22',\n    name   : 'sauron'\n  },\n  {\n    label  : 'saruman',\n    color  : 'burlywood',\n    name   : 'saruman',\n    yScale : 'secondary'\n  }\n  ]\n}", 
            "title": "____ Dual Axis Timecharts"
        }, 
        {
            "location": "/charts/timechart_dual_axis/#creating-a-dual-axis-time-chart", 
            "text": "A time chart can have one Y axis or two. A dual-axis time chart is a\nmulti-series time chart in which some of the series have a different Y\nscale than the others.    In your @ timechart ,\n    use the  yScales.primary.*  and  yScales.secondary.*  parameters\n    to configure the two Y scales.    One must include displayOnAxis: 'right'.    Use the  series.yScale  parameter to configure\n    the data series that belong to the secondary Y scale.  Since primary is the default value, you only need to specify this\nparameter for the series that belong to the secondary scale.    Example: Create a time chart in which the 'saruman' series uses the right-hand Y axis and all others use the left-hand Y axis  sub src(cate, coefficient) {\n  emit -limit 100 -hz 10 |\n  put category = cate       |\n  put value = Math.random() * coefficient\n}\n\n(\nsrc -cate  smaug    -coefficient 10;\nsrc -cate  sauron   -coefficient 20;\nsrc -cate  saruman  -coefficient 1;\n) |\nview timechart -o {\n  keyField: 'category',\n  yScales: {\n    secondary: {}\n  },\n  series: [\n  {\n    label  : 'smaug',\n    color  : 'red',\n    name   : 'smaug'\n  },\n  {\n    label  : 'sauron',\n    color  : '#228B22',\n    name   : 'sauron'\n  },\n  {\n    label  : 'saruman',\n    color  : 'burlywood',\n    name   : 'saruman',\n    yScale : 'secondary'\n  }\n  ]\n}", 
            "title": "Creating a dual-axis time chart"
        }
    ]
}